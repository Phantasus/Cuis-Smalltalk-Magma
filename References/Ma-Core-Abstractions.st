Object subclass: #MaObject	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Ma-Core-Abstractions'!!MaObject commentStamp: 'cmm 10/25/2005 22:43' prior: 0!I provide automatic initialization (which was later added to Squeak 3.7), and the notion of a verbose (standard printOn:) and concise (maPrintAbbreviatedOn:) forms for brevity in collections.!!MaObject methodsFor: 'printing' stamp: 'cmm 2/28/2013 21:00'!abbreviation	^ self maOriginalClass abbreviation! !!MaObject methodsFor: 'printing' stamp: 'cmm 4/22/2002 22:13'!printOn: aStream	super printOn: aStream.	aStream space.	self maPrintAbbreviatedOn: aStream! !!MaObject methodsFor: 'private' stamp: 'cmm 8/7/2014 17:02'!validateDomainVersion	MaWarning signal: 'Not a MagmaWorld, cannot validate domainVersion.'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MaObject class	instanceVariableNames: ''!!MaObject class methodsFor: 'linux-scripts' stamp: 'cmm 12/4/2016 22:29'!configsys	"Script to install the HT-versions of Cog and Spur on a Ubuntu 14.04 system.""Removed installation of libgl1-mesa-glx:i386 because it caused a package dependency failure on Ubuntu 14.04.02 LTS Desktop.  Was able to eliminate it and still install Spur, not sure if its needed for Ubuntu Server Edition though..."	^ 'sudo dpkg-reconfigure tzdata# sudo timedatectl set-timezone America/Chicagoecho adding 32-bit libraries to support Smalltalk VMsudo dpkg --add-architecture i386sudo apt-get -qq updatesudo apt-get install libuuid1:i386 libglu1-mesa:i386 libsm6:i386echo installing Smalltalk VMs./upgradespurht' -> [ ]! !!MaObject class methodsFor: 'linux-scripts' stamp: 'cmm 7/30/2015 15:49'!testAppend	^ 'spur -vm display=none update-spur testAppend.st $1 > testAppend.log 2>&1' ->		[ Smalltalk runAndQuit:			[ : stringToAppend | FileStream				fileNamed: 'testAppend.out'				do:					[ : stream | stream						setToEnd ;						lf ;						maPrint: DateAndTime now ;						space ;						maPrint: stringToAppend ] ] ]! !!MaObject class methodsFor: 'copyright' stamp: 'cmm 4/27/2014 22:04'!copyright	^ 'Copyright ', Date today year asString , ', Muller Automation LLC,, All Rights Reserved.'! !!MaObject class methodsFor: '*ma-client-server-core' stamp: 'cmm 10/12/2015 17:33'!defaultSound	^ nil! !MaObject subclass: #MaAttributableObject	instanceVariableNames: 'attributes'	classVariableNames: ''	poolDictionaries: ''	category: 'Ma-Core-Abstractions'!!MaAttributableObject commentStamp: 'cmm 10/7/2009 21:03' prior: 0!Subclass from this abstract class to inherit an attribute Dictionary.!!MaAttributableObject methodsFor: 'attributes' stamp: 'cmm 4/9/2010 14:43'!attributeNamed: aString 	^ attributes ifNotNil: 		[ attributes 			at: aString			ifAbsent: [ nil ] ]! !!MaAttributableObject methodsFor: 'attributes' stamp: 'cmm 7/4/2013 20:18'!attributeNamed: aString put: anObject 	anObject ifNotNil: [ attributes ifNil: [ attributes := Dictionary new ] ].	^ anObject		ifNil:			[ self removeAttributeNamed: aString.			anObject ]		ifNotNil:			[ attributes				at: aString				put: anObject ]! !!MaAttributableObject methodsFor: 'attributes' stamp: 'cmm 4/9/2010 14:42'!hasAttributeNamed: aString 	^ attributes 		ifNil: [ false ]		ifNotNil: [ attributes includesKey: aString ]! !!MaAttributableObject methodsFor: 'attributes' stamp: 'cmm 10/7/2009 21:02'!removeAttributeNamed: aString 	^ attributes ifNotNil: 		[ | answer |		answer := attributes 			removeKey: aString			ifAbsent: [ nil ].		attributes ifEmpty: [ attributes := nil ].		answer ]! !!MaAttributableObject methodsFor: 'copying' stamp: 'cmm 2/3/2016 17:39'!attributesNotToDeepCopy	^ (self attributeNamed: #attributesNotToDeepCopy) ifNil: [ Array empty ]! !!MaAttributableObject methodsFor: 'copying' stamp: 'cmm 2/3/2016 17:40'!attributesNotToDeepCopy: anArray	^ (self attributeNamed: #attributesNotToDeepCopy) ifNil: [ Array empty ]! !!MaAttributableObject methodsFor: 'copying' stamp: 'cmm 2/3/2016 11:02'!attributesToDeepCopy	"Subclasses override."	^ (attributes		ifNil: [ Array empty ]		ifNotNil: [ attributes keys ]) copyWithoutAll: self attributesNotToDeepCopy! !!MaAttributableObject methodsFor: 'copying' stamp: 'cmm 1/3/2014 14:27'!postCopy	"At a minimum, we must copy my attributes."	super postCopy.	attributes := attributes copy! !!MaAttributableObject methodsFor: 'copying' stamp: 'cmm 7/4/2013 20:25'!veryDeepInner: aDeepCopier 	super veryDeepInner: aDeepCopier.	attributes := attributes copy.	self attributesToDeepCopy do:		[ : eachAttribute | attributes			at: eachAttribute			ifPresent:				[ : value | attributes					at: eachAttribute					put: (value veryDeepCopyWith: aDeepCopier) ]			ifAbsent: [ self error: eachAttribute , ' is not an attribute.' ] ]! !!MaAttributableObject methodsFor: 'remember/restore' stamp: 'cmm 12/7/2009 17:02'!rememberAttributes	"Remember my current attributes as an attribute called, #priorAttributes."	| priorAttributes |	(self attributeNamed: #priorAttributes) ifNotNil: [ MaUserError signal: 'priorAttributes already present' ].	priorAttributes := attributes.	attributes := attributes copy.	self 		attributeNamed: #priorAttributes		put: priorAttributes! !!MaAttributableObject methodsFor: 'remember/restore' stamp: 'cmm 10/28/2011 15:38'!restoreAttributes	"Restore my prior-attributes which were remembered via #rememberAttributes."	attributes 		at: #priorAttributes		ifPresent: [ : foundAttributes | attributes := foundAttributes ]		ifAbsent: 			[ "there were no attributes when rememberAttributes was called"			 ]! !MaObject subclass: #MaSingleton	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Ma-Core-Abstractions'!!MaSingleton methodsFor: 'actions' stamp: 'cmm 12/29/2015 10:39'!beCurrent	self class current: self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MaSingleton class	instanceVariableNames: 'current'!!MaSingleton class methodsFor: 'accessing' stamp: 'cmm 11/23/2010 23:51'!current	^ current ifNil:		[ self current: self new.		current ]! !!MaSingleton class methodsFor: 'accessing' stamp: 'cmm 11/18/2010 13:11'!current: anObject	current := anObject! !!MaSingleton class methodsFor: 'actions' stamp: 'cmm 1/10/2005 21:54'!initialize	super initialize.	self reset! !!MaSingleton class methodsFor: 'actions' stamp: 'cmm 4/22/2011 14:31'!reset	self current: nil! !MaSingleton initialize!