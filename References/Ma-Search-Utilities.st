Object subclass: #MaBehaviorFinder	instanceVariableNames: 'packages classes categories methods caseSensitive changedTimer'	classVariableNames: ''	poolDictionaries: ''	category: 'Ma-Search-Utilities'!!MaBehaviorFinder commentStamp: 'cmm 12/3/2008 14:35' prior: 0!I'm useful for finding packages, classes and methods in the image.  At the lowest levels I interrogate Methods, and merely cache my lists 'packages' and 'classes' based on method results.Any object responds to #newBehaviorFinder, which creates a new instance of me with that element added.!!MaBehaviorFinder methodsFor: 'actions' stamp: 'cmm 4/3/2014 15:26'!addAll	"Selects all methods in the image."	| count |	'Adding all code-elements...'		displayProgressFrom: (count := 0)		to: self systemNavigation maNumberOfClasses		during:			[ : bar | self systemNavigation allClassesDo:				[ : each | bar value: (count := count + 1).				self					 addClass: each ;					 addClass: each class ] ]! !!MaBehaviorFinder methodsFor: 'actions' stamp: 'cmm 12/4/2008 14:05'!addElement: anyCodeElement	"Add anyCodeElement to me.  anyCodeElement may be any of a PackageInfo, Class or MethodReference, or, a Collection of those elements."	anyCodeElement maAddToCodeElementFinder: self! !!MaBehaviorFinder methodsFor: 'actions' stamp: 'cmm 7/6/2010 21:19'!browseMethods	"Open a methods browser on my methods."	self systemNavigation	 	browseMessageList: (self sortedMethods)		name: 'methods found'! !!MaBehaviorFinder methodsFor: 'actions' stamp: 'cmm 12/15/2008 17:38'!clear	"Remove all of my methods."	self		initialize ;		invalidateCache! !!MaBehaviorFinder methodsFor: 'change sets' stamp: 'cmm 12/4/2008 19:18'!addAllChangeSetsInCategoryNamed: aString	"Add methods in ChangeSets in category named aString."	(ChangeSorter changeSetCategoryNamed: aString) changeSetList		do:			[ :each | self addChangeSetNamed: each ]! !!MaBehaviorFinder methodsFor: 'change sets' stamp: 'cmm 3/12/2010 18:16'!addChangeSet: aChangeSet 	"Add methods contained in aChangeSet."	| changesDictionary |	changesDictionary := aChangeSet methodChanges.	changesDictionary keysAndValuesDo:		[ : eachClassName : eachChangesDict | | class |		class := eachClassName substrings size = 1			ifTrue: [ Smalltalk classNamed: eachClassName ]			ifFalse: [ Smalltalk classNamed: eachClassName substrings first asSymbol ].		class ifNotNil:			[ eachClassName substrings size > 1 ifTrue: [ "if it is a class method"				class := class class].			eachChangesDict keysAndValuesDo:				[ : eachSelector : eachChangeType | (#(#add #change ) includes: eachChangeType) ifTrue:					[ (class methodDict includesKey: eachSelector) ifTrue: [ self addMethod: (class compiledMethodAt: eachSelector) ] ] ] ] ]! !!MaBehaviorFinder methodsFor: 'change sets' stamp: 'cmm 4/22/2002 23:02'!addChangeSetNamed: aString	^self addChangeSet: (ChangeSorter changeSetNamed: aString)! !!MaBehaviorFinder methodsFor: 'change sets' stamp: 'cmm 12/3/2008 10:38'!rejectMethodsInChangeSet: aChangeSet 	self rejectMethods: 		[ : each | 		(ChangeSorter 			allChangeSetsWithClass: each actualClass			selector: each selector) includes: aChangeSet ]! !!MaBehaviorFinder methodsFor: 'change sets' stamp: 'cmm 12/3/2008 10:38'!rejectMethodsInNoChangeSet	| count |	count := 0.	self rejectMethods: 		[ : each | 		count := count + 1.		count \\ 10 = 0 ifTrue: 			[ ProgressNotification signal: count printString , ' methods searched.' ].		(ChangeSorter 			allChangeSetsWithClass: each actualClass			selector: each selector) isEmpty ]! !!MaBehaviorFinder methodsFor: 'change sets' stamp: 'cmm 12/3/2008 10:38'!selectMethodsInChangeSet: aChangeSet 	"Remove all methods other than those contained in aChangeSet."	self selectMethods: 		[ : each | 		(ChangeSorter 			allChangeSetsWithClass: each actualClass			selector: each selector) includes: aChangeSet ]! !!MaBehaviorFinder methodsFor: 'change sets' stamp: 'cmm 4/23/2002 00:14'!selectMethodsInChangeSetNamed: aString	^self selectMethodsInChangeSet: (ChangeSorter changeSetNamed: aString)! !!MaBehaviorFinder methodsFor: 'change sets' stamp: 'cmm 12/3/2008 10:38'!selectMethodsInNoChangeSet	| count |	count := 0.	self selectMethods: 		[ : each | 		count := count + 1.		count \\ 10 = 0 ifTrue: 			[ ProgressNotification signal: count printString , ' methods searched.' ].		(ChangeSorter 			allChangeSetsWithClass: each actualClass			selector: each selector) isEmpty ]! !!MaBehaviorFinder methodsFor: 'packages' stamp: 'cmm 12/2/2008 23:08'!addAllPackages	PackageInfo allPackages do: [ : each | self addPackage: each ]! !!MaBehaviorFinder methodsFor: 'packages' stamp: 'cmm 12/2/2008 20:37'!addPackage: aPackageInfo 	self addMethods: aPackageInfo methods! !!MaBehaviorFinder methodsFor: 'packages' stamp: 'cmm 12/4/2008 21:16'!addPackagesWithNamesBeginning: aString	"Add packages whose names begin with aString."	PackageInfo allPackages do: 		[ : each | 		(each packageName 			maBeginsWith: aString			caseSensitive: self isCaseSensitive) ifTrue: [ self addPackage: each ] ]! !!MaBehaviorFinder methodsFor: 'packages' stamp: 'cmm 12/4/2008 21:15'!addPackagesWithNamesContaining: aString 	"Add methods of all loaded packages whose names contain the sub-string, aString."	PackageInfo allPackages do: 		[ : each | 		(each packageName 			includesSubstring: aString			caseSensitive: self isCaseSensitive) ifTrue: [ self addPackage: each ] ]! !!MaBehaviorFinder methodsFor: 'packages' stamp: 'cmm 9/7/2013 11:12'!packages	^ packages ifNil: 		[ packages := Set new.		"Use one of two different approaches to calculate packages to maximize efficiency."		self methods size < 150 			ifTrue: 				[ |x| x := 0. 'Calculating packages...' 					displayProgressFrom: 1					to: self methods size					during: 						[ : bar | 						self methods do: 							[ : each | 							bar value: (x:=x+1).							each packageInfo ifNotNilDo: [ : pkg | packages add: pkg ] ] ] ]			ifFalse: 				[ 'Calculating packages...' 					displayProgressAt: Display topCenter					from: 1					to: PackageInfo allPackages size					during: 						[ : bar | 						PackageInfo allPackages withIndexDo: 							[ : eachPackage : x | 							bar value: x.							((self methods includesAnyOf: eachPackage coreMethods) or: [ self methods includesAnyOf: eachPackage methods ]) ifTrue: [ packages add: eachPackage ] ] ] ].		packages := packages asSortedCollection: [ : a : b | a packageName < b packageName ] ]! !!MaBehaviorFinder methodsFor: 'packages' stamp: 'cmm 12/19/2008 17:38'!removePackage: aPackageInfo 	aPackageInfo methods do: [ : each | self removeMethod: each ]! !!MaBehaviorFinder methodsFor: 'packages' stamp: 'cmm 12/2/2008 20:46'!selectPackage: aPackageInfo 	"Remove all methods except those in aPackageInfo."	self selectMethods: [ : each | each packageInfo = aPackageInfo ]! !!MaBehaviorFinder methodsFor: 'classes' stamp: 'cmm 12/18/2004 18:09'!addClass: aClass	"Adds all methods in aClass"	aClass selectorsDo:		[ : each | 		self addMethod: (MethodReference class: aClass selector: each) ]! !!MaBehaviorFinder methodsFor: 'classes'!addClassHierarchy: aClass	"Adds the methods in aClass as well as all of its superclasses."	self addSuperclassHierarchy: aClass.	self addSubclassHierarchy: aClass! !!MaBehaviorFinder methodsFor: 'classes'!addClasses: classesCollection	"Adds all methods in each class in classesCollectoin"	classesCollection do: [ :each | self addClass: each ]! !!MaBehaviorFinder methodsFor: 'classes' stamp: 'cmm 12/3/2008 17:40'!addClassesImplementing: selectorSymbol 	self addClasses: (self systemNavigation allClassesImplementing: selectorSymbol)! !!MaBehaviorFinder methodsFor: 'classes' stamp: 'cmm 12/4/2008 23:08'!addClassesNamed: aString 	"Add any classes known in the image whose names include aString anywhere."	self systemNavigation allBehaviorsDo: 		[ : each | 		(each name 			includesSubstring: aString			caseSensitive: self isCaseSensitive) ifTrue: [ self addClass: each ] ]! !!MaBehaviorFinder methodsFor: 'classes' stamp: 'cmm 3/17/2009 20:10'!addCommonBehaviorForClass: aClass 	"Adds all methods in aClass, plus its superclasses other than Object and ProtoObject."	| inheritedBehaviors |	inheritedBehaviors := { 		(Object class).		(ProtoObject class)."		Class.		ClassDescription.		Behavior."		Object.		ProtoObject	 }.	aClass withAllSuperclassesDo: 		[ : each | 		((inheritedBehaviors includes: each) and: [ (inheritedBehaviors includes: aClass) not ]) ifFalse: [ self addClass: each ] ]! !!MaBehaviorFinder methodsFor: 'classes'!addSubclassHierarchy: aClass	"Adds the methods in aClass as well as all of its subclasses."	aClass withAllSubclassesDo: [ :each | self addClass: each ]! !!MaBehaviorFinder methodsFor: 'classes'!addSuperclassHierarchy: aClass	"Adds the methods in aClass as well as all of its subclasses."	aClass withAllSuperclassesDo: [ :each | self addClass: each ]! !!MaBehaviorFinder methodsFor: 'classes' stamp: 'cmm 12/3/2008 17:53'!classes	"Returns the set of classes that all methods in the receiver span."	^ classes ifNil: 		[ classes := Set new.		self methods do: [ : each | each actualClass ifNotNilDo: [ : cls | classes add: cls ] ].		classes := classes asSortedCollection: [ : a : b | a name < b name ] ]! !!MaBehaviorFinder methodsFor: 'classes' stamp: 'cmm 3/15/2010 21:45'!rejectClassHierarchy: aClass 	"Select all methods in the receiver which exist in aClass as	well as all of its super and subclasses."	| fullHiearchy |	fullHiearchy := aClass withAllSubclasses asSet		addAll: aClass allSuperclasses ;		yourself.	self rejectMethods: [ : each | fullHiearchy includes: each actualClass ]! !!MaBehaviorFinder methodsFor: 'classes' stamp: 'cmm 12/4/2008 22:44'!rejectClassesImplementing: selectorSymbol 	self rejectMethods: [ : each | each actualClass includesSelector: selectorSymbol ]! !!MaBehaviorFinder methodsFor: 'classes' stamp: 'cmm 12/4/2008 22:45'!rejectClassesNamed: classNameArgumentSubstring 	"Filter out all methods in the receiver that belong to one of the classes whose names contain classNameArgumentSubstring."	self rejectMethods: 		[ : each | 		each actualClass name 			includesSubstring: classNameArgumentSubstring			caseSensitive: self isCaseSensitive ]! !!MaBehaviorFinder methodsFor: 'classes' stamp: 'cmm 12/4/2008 22:47'!rejectSubclassHierarchy: aClass 	"Reject all methods in the receiver which exist in a aClass or any of aClass subclasses."	| hierarchy |	hierarchy := aClass withAllSubclasses asSet.	self rejectMethods: [ : each | hierarchy includes: each actualClass ]! !!MaBehaviorFinder methodsFor: 'classes' stamp: 'cmm 12/4/2008 22:49'!rejectSuperclassHierarchy: aClass 	"Reject all methods in the receiver which exist in a aClass as or any of aClass superclasses."	| hierarchy |	hierarchy := aClass withAllSuperclasses.	self rejectMethods: [ : each | hierarchy includes: each actualClass ]! !!MaBehaviorFinder methodsFor: 'classes' stamp: 'cmm 12/3/2008 14:27'!removeClass: aClass 	"Adds all methods in aClass"	aClass selectorsDo: 		[ : each | 		self removeMethod: 			(MethodReference 				class: aClass				selector: each) ]! !!MaBehaviorFinder methodsFor: 'classes' stamp: 'cmm 12/2/2008 16:44'!selectClass: aClass 	"Select all methods in the receiver which exist in an aClass"	self selectMethods: [ : each | each actualClass == aClass ]! !!MaBehaviorFinder methodsFor: 'classes' stamp: 'cmm 3/15/2010 21:45'!selectClassHierarchy: aClass 	"Select all methods in the receiver which exist in aClass as	well as all of its super and subclasses."	| fullHiearchy |	fullHiearchy := aClass withAllSubclasses asSet		addAll: aClass allSuperclasses ;		yourself.	self selectMethods: [ : each | fullHiearchy includes: each actualClass ]! !!MaBehaviorFinder methodsFor: 'classes' stamp: 'cmm 1/24/2009 14:44'!selectClasses: aBlock 	"Filter out all methods in the receiver that don't belong to one of the classes whose names contain  classNameArgumentSubstring."	self selectMethods: [ : each | aBlock value: each actualClass ]! !!MaBehaviorFinder methodsFor: 'classes' stamp: 'cmm 12/2/2008 19:01'!selectClassesImplementing: selectorSymbol 	self selectMethods: [ : each | each actualClass includesSelector: selectorSymbol ]! !!MaBehaviorFinder methodsFor: 'classes' stamp: 'cmm 12/4/2008 16:47'!selectClassesNamed: classNameArgumentSubstring 	"Filter out all methods in the receiver that don't belong to one of the classes whose names contain  classNameArgumentSubstring."	self selectMethods: 		[ : each | 		each actualClass name 			includesSubstring: classNameArgumentSubstring			caseSensitive: self isCaseSensitive ]! !!MaBehaviorFinder methodsFor: 'classes' stamp: 'cmm 12/4/2008 22:53'!selectCommonBehavior	"Remove methods in Object or ProtoObject."	{  ProtoObject. Object  } do: [ : each | self removeClass: each ]! !!MaBehaviorFinder methodsFor: 'classes' stamp: 'cmm 3/15/2010 21:46'!selectSubclassHierarchy: aClass 	"Select all methods in the receiver which exist in a aClass or any of aClass subclasses."	| hierarchy |	hierarchy := aClass withAllSubclasses asSet.	self selectMethods: [ : each | hierarchy includes: each actualClass ]! !!MaBehaviorFinder methodsFor: 'classes' stamp: 'cmm 12/4/2008 22:49'!selectSuperclassHierarchy: aClass 	"Select all methods in the receiver which exist in a aClass as or any of aClass superclasses."	| hierarchy |	hierarchy := aClass withAllSuperclasses.	self selectMethods: [ : each | hierarchy includes: each actualClass ]! !!MaBehaviorFinder methodsFor: 'classes' stamp: 'cmm 12/2/2008 11:40'!sortedClasses	"Returns the set of classes that all methods in the receiver span."	^ self classes asSortedCollection: [ : a : b | a name < b name ]! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 12/3/2008 13:46'!addMethod: aMethodReference 	methods add: aMethodReference.	self invalidateCache! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 12/2/2008 19:08'!addMethods: aCollection 	aCollection do: [ : each | self addMethod: each ]! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 12/3/2008 17:40'!addMethodsNamed: aSymbol 	"Add methods exactly named aSymbol."	self systemNavigation allBehaviorsDo: 		[ : eachClass | 		eachClass selectorsDo: 			[ : eachSelector | 			(eachSelector = aSymbol) ifTrue: 				[ self addMethod: 					(MethodReference 						class: eachClass						selector: eachSelector) ] ] ]! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 3/12/2010 17:32'!addMethodsReferencing: globalName 	"Add all methods whose names reference aClass."	(Smalltalk hasClassNamed: globalName) ifFalse: [ ^ self ].	self addMethods: (self systemNavigation allCallsOn: (Smalltalk associationAt: globalName))! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 12/11/2008 14:59'!addMethodsSending: selectorString 	"Add all methods that send method named selectorString."	| selectorSymbol |	(Symbol 		hasInterned: selectorString		ifTrue: [ : sym | true ]) ifFalse: [ ^ self ].	selectorSymbol := selectorString asSymbol.	self systemNavigation allBehaviorsDo: 		[ : eachClass | 		eachClass methodsDo: 			[ : eachCm | 			(eachCm sendsSelector: selectorSymbol) ifTrue: 				[ self addMethod: 					(MethodReference 						class: eachClass						selector: eachCm selector) ] ] ]! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 12/3/2008 17:41'!addMethodsWithNamesContaining: aString 	"Add all methods in the system whose selector contains aString as a subString."	self systemNavigation allBehaviorsDo: 		[ : eachClass | 		eachClass selectorsDo: 			[ : eachSelector | 			(eachSelector 				includesSubstring: aString				caseSensitive: self isCaseSensitive) ifTrue: 				[ self addMethod:					(MethodReference 						class: eachClass						selector: eachSelector) ] ] ]! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 12/3/2008 17:41'!addMethodsWithStringLiteral: aString 	self addMethods:		(self systemNavigation allMethodsSelect: 			[ : method | 			method hasLiteralSuchThat: 				[ : lit | 				(lit isString and: [ lit isSymbol not ]) and: 					[ lit 						includesSubstring: aString						caseSensitive: self isCaseSensitive ] ] ])! !!MaBehaviorFinder methodsFor: 'methods'!methods	"Returns the selected methods."	^methods! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 12/3/2008 13:46'!methods: aSet 	methods := aSet.	self invalidateCache! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 12/2/2008 16:44'!rejectMethods: aBlock 	self methods: (self methods reject: aBlock)! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 12/4/2008 19:40'!rejectMethodsAuthoredBy: aString 	"Removes all but the methods named aString"	self rejectMethods: [ : each | each maAuthor = aString ]! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 12/4/2008 19:41'!rejectMethodsContainingString: aString 	"Reject the methods containing aString in their source code."	self rejectMethods: 		[ : each | 		each sourceString notNil and: 			[ each sourceString 				includesSubstring: aString				caseSensitive: self isCaseSensitive ] ]! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 12/4/2008 19:42'!rejectMethodsNamed: aString 	"Removes all methods named aString"	self rejectMethods: [ : each | each selector = aString ]! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 12/11/2008 14:59'!rejectMethodsSending: selectorString 	"Remove methods that send selectorString."	| selectorSymbol |	(Symbol 		hasInterned: selectorString		ifTrue: [ : sym | true ]) ifFalse: [ ^ self ].	selectorSymbol := selectorString asSymbol.	self selectMethods: [ : each | each maActualMethod sendsSelector: selectorSymbol ]! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 12/4/2008 19:43'!rejectMethodsWithNamesContaining: aString 	"Removes all methods whose names that include subString aString."	self rejectMethods: 		[ : each | 		each selector asString 			includesSubstring: aString			caseSensitive: self isCaseSensitive ]! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 12/4/2008 19:47'!rejectMethodsWithStringLiteral: aString 	"Remove methods that have a String literal with a substring, aString."	self rejectMethods: 		[ : method | 		method hasLiteralSuchThat: 			[ : lit | 			(lit isString and: [ lit isSymbol not ]) and: 				[ lit 					includesSubstring: aString					caseSensitive: self isCaseSensitive ] ] ]! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 12/3/2008 14:26'!removeMethod: aMethodReference 	methods 		remove: aMethodReference		ifAbsent: 			[ "don't complain"			 ].	self invalidateCache! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 12/2/2008 16:43'!selectMethods: aBlock 	self methods: (self methods select: aBlock)! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 12/4/2008 19:40'!selectMethodsAuthoredBy: aString 	"Removes all but the methods named aString"	self selectMethods: [ : each | each maAuthor = aString ]! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 1/25/2009 16:24'!selectMethodsContainingString: aString 	"Select the methods containing aString in their source code."	self selectMethods: 		[ : each | 		each sourceString notNil and: 			[ each sourceString 				includesSubstring: aString				caseSensitive: self caseSensitive ] ]! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 12/3/2008 14:58'!selectMethodsNamed: aString 	"Removes all but the methods named aString"	self selectMethods: [ : each | each selector = aString ]! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 8/24/2015 17:31'!selectMethodsReferencing: variableName 	"Remove methods whose names don't reference the variable named aString.  variableName may be the name of a global or an inst-var name in a class."	| allCalls |	(Smalltalk hasClassNamed: variableName)		ifTrue:			[ allCalls := self systemNavigation allCallsOn: (Smalltalk associationAt: variableName).			self selectMethods:				[ : each | allCalls includes: each ] ]		ifFalse:			[ self selectMethods:				[ : each | | offset | (offset := each actualClass indexOfInstVarNamed: variableName) > 0 and: [ each compiledMethod readsField: offset ] ] ]! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 12/2/2008 23:33'!selectMethodsReferencingSuper	"Select methods which send any message to super."	self selectMethods: [ : each | each sendsToSuper ]! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 12/11/2008 14:58'!selectMethodsSending: selectorString 	"Remove all methods that don't send selectorString."	| selectorSymbol |	(Symbol 		hasInterned: selectorString		ifTrue: [ : sym | true ]) ifFalse: [ ^ self ].	selectorSymbol := selectorString asSymbol.	self selectMethods: [ : each | each maActualMethod sendsSelector: selectorSymbol ]! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 12/4/2008 14:32'!selectMethodsWithNamesContaining: aString 	"Removes all but the method names that include subString aString."	self selectMethods: 		[ : each | 		each selector asString 			includesSubstring: aString			caseSensitive: self isCaseSensitive ]! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 12/4/2008 19:45'!selectMethodsWithStringLiteral: aString 	"Select only the methods that have a String literal with subString, aString."	self selectMethods: 		[ : method | 		method hasLiteralSuchThat: 			[ : lit | 			(lit isString and: [ lit isSymbol not ]) and: 				[ lit 					includesSubstring: aString					caseSensitive: self isCaseSensitive ] ] ]! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 12/3/2008 17:50'!selectMethodsWithUnimplementedSends	"Answer methods which specify a message-selector not implemented by any object in the image."	| allSelectors |	allSelectors := self systemNavigation allImplementedMessages.	self rejectMethods: [ : each | allSelectors includesAnyOf: each maSentSelectors ]! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 9/7/2013 11:07'!selectPrivateMethods	"Remove methods not in a category beginning with the word 'private'."	self selectMethods: 		[ : each | 		each category 			maBeginsWith: 'private'			caseSensitive: false ]! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 9/7/2013 11:07'!selectPublicMethods	"Remove methods in a category beginning with the word 'private'."	self rejectMethods: 		[ : each | 		each category 			maBeginsWith: 'private'			caseSensitive: false ]! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 12/4/2008 22:39'!selectUnsentMethods	"Answer methods which are not sent by any other object in the system."	self selectMethods: [ : each | (self systemNavigation allCallsOn: each selector) isEmpty ]! !!MaBehaviorFinder methodsFor: 'methods' stamp: 'cmm 12/4/2008 19:46'!sortedMethods	"Answer my methods sorted by selector."	^ methods asSortedCollection: [ : a : b | a selector < b selector ]! !!MaBehaviorFinder methodsFor: 'configuration' stamp: 'cmm 12/4/2008 21:18'!caseSensitive	^caseSensitive! !!MaBehaviorFinder methodsFor: 'configuration' stamp: 'cmm 12/4/2008 22:03'!caseSensitive: aBoolean 	"Whether string comparisons should be sensitive to case."	caseSensitive := aBoolean! !!MaBehaviorFinder methodsFor: 'configuration' stamp: 'cmm 12/4/2008 21:18'!isCaseSensitive	^ self caseSensitive! !!MaBehaviorFinder methodsFor: 'categories' stamp: 'cmm 9/7/2013 11:07'!categories	"The category names of my methods."	^ categories ifNil: 		[ categories := Set new.		self methods do: [ : each | each category ifNotNilDo: [ : cat | categories add: cat ] ].		categories := categories asSortedCollection ]! !!MaBehaviorFinder methodsFor: 'categories' stamp: 'cmm 9/7/2013 11:07'!rejectMethodsInCategory: categoryString 	"Remove methods whose category contains the sub-string, categoryString."	self rejectMethods: 		[ : each | 		each category 			includesSubstring: categoryString			caseSensitive: self caseSensitive ]! !!MaBehaviorFinder methodsFor: 'categories' stamp: 'cmm 9/7/2013 11:07'!selectMethodsInCategory: categoryString 	"Remove methods not in a category whose name includes the sub-string, categoryString."	self selectMethods: 		[ : each | 		each category 			includesSubstring: categoryString			caseSensitive: self caseSensitive ]! !!MaBehaviorFinder methodsFor: 'private' stamp: 'cmm 12/15/2008 17:46'!changedTimer	^ changedTimer ifNil: 		[ changedTimer := MaTimer new 			in: 1 second			do: 				[ self					changed ;					resetChangedTimer ] ]! !!MaBehaviorFinder methodsFor: 'private' stamp: 'cmm 12/15/2008 17:35'!invalidateCache	classes := nil.	packages := nil.	categories := nil.	self sendChangedSoon! !!MaBehaviorFinder methodsFor: 'private' stamp: 'cmm 12/3/2008 14:15'!maAddToCodeElementFinder: aMaCodeElementFinder 	aMaCodeElementFinder addMethods: self methods! !!MaBehaviorFinder methodsFor: 'private' stamp: 'cmm 12/15/2008 17:35'!sendChangedSoon	"Sending #changed on every #addMethod really slows things down.  Only send changed if there has been one second of inactivity."	self changedTimer resetDelay! !!MaBehaviorFinder methodsFor: 'copying' stamp: 'cmm 12/4/2008 22:33'!copy	"Clone this Finder."	^ super copy! !!MaBehaviorFinder methodsFor: 'copying' stamp: 'cmm 12/3/2008 14:16'!postCopy	methods := methods copy.	classes := classes copy.	packages := packages copy! !!MaBehaviorFinder methodsFor: 'initializing' stamp: 'cmm 12/15/2008 17:45'!initialize	methods := Set new.	caseSensitive := false! !!MaBehaviorFinder methodsFor: 'initializing' stamp: 'cmm 12/15/2008 17:45'!resetChangedTimer	changedTimer := nil! !