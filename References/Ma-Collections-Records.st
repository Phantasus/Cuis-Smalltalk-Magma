MaObject subclass: #MaRecordBroker	instanceVariableNames: 'headerSize recordSize'	classVariableNames: ''	poolDictionaries: ''	category: 'Ma-Collections-Records'!!MaRecordBroker commentStamp: 'cmm 5/18/2005 09:46' prior: 0!I am an abstract superclass for record-based collections such as MaHashIndex and MaLargeArrayOfNumbers.  By plugging them with my appropriate subclass, they are able to be file-based or in-memory (or maybe remote network location in the future).I don't actually deal with the records themselves, just their reading and writing to the storage.!!MaRecordBroker methodsFor: 'accessing' stamp: 'cmm 8/12/2007 20:34'!close	"File-based will override."! !!MaRecordBroker methodsFor: 'accessing' stamp: 'cmm 5/17/2005 23:49'!headerSize	^ headerSize! !!MaRecordBroker methodsFor: 'accessing' stamp: 'cmm 5/17/2005 23:49'!headerSize: anInteger	headerSize := anInteger! !!MaRecordBroker methodsFor: 'accessing' stamp: 'cmm 5/22/2005 21:15'!recordSize	^ recordSize! !!MaRecordBroker methodsFor: 'accessing' stamp: 'cmm 5/22/2005 21:15'!recordSize: anInteger	recordSize := anInteger! !!MaRecordBroker methodsFor: 'override' stamp: 'cmm 5/23/2005 14:32'!delete	"Do nothing by default."! !!MaRecordBroker methodsFor: 'override' stamp: 'cmm 5/17/2005 23:01'!nextRecordNumber	self subclassResponsibility ! !!MaRecordBroker methodsFor: 'override' stamp: 'cmm 8/14/2007 22:37'!open: fileNameString	"Only the MaFileRecordBroker needs to do anything."! !!MaRecordBroker methodsFor: 'override' stamp: 'cmm 5/23/2005 22:50'!readInto: aMaFixedLengthRecord at: recordIndex	self subclassResponsibility! !!MaRecordBroker methodsFor: 'override' stamp: 'cmm 3/20/2007 22:27'!writeFrom: aByteArray at: recordIndex 	self subclassResponsibility! !!MaRecordBroker methodsFor: '*magma-server' stamp: 'cmm 10/22/2006 14:58'!filePool: aMaFileStreamPool	"only applicable to MaFileRecordBrokers"! !!MaRecordBroker methodsFor: '*magma-server-recovery' stamp: 'cmm 7/5/2005 22:29'!filesDo: aBlock	"nothing to do by default."! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MaRecordBroker class	instanceVariableNames: ''!!MaRecordBroker class methodsFor: 'as yet unclassified' stamp: 'cmm 5/17/2005 23:52'!headerSize: anInteger	^ self new		headerSize: anInteger ;		yourself! !MaRecordBroker subclass: #MaFileRecordBroker	instanceVariableNames: 'file'	classVariableNames: ''	poolDictionaries: ''	category: 'Ma-Collections-Records'!!MaFileRecordBroker methodsFor: 'file-specific' stamp: 'cmm 5/17/2005 23:32'!close	file ifNotNil: [ file closed ifFalse: [ file close ] ]! !!MaFileRecordBroker methodsFor: 'file-specific' stamp: 'cmm 6/13/2005 23:22'!create: aFileStream	file := aFileStream ifNil: [ ReadWriteStream on: (ByteArray new: 1000) ]! !!MaFileRecordBroker methodsFor: 'file-specific' stamp: 'cmm 5/18/2005 13:30'!delete	self close.	(FileDirectory forFileName: file name) deleteFileNamed: file name! !!MaFileRecordBroker methodsFor: 'file-specific' stamp: 'cmm 5/18/2005 14:30'!filePositionFor: recordIndex	^ recordIndex * recordSize + headerSize! !!MaFileRecordBroker methodsFor: 'file-specific' stamp: 'cmm 5/30/2006 08:49'!filename	^ file filename! !!MaFileRecordBroker methodsFor: 'file-specific' stamp: 'cmm 6/14/2005 10:31'!open: aReadWriteStream	file := aReadWriteStream! !!MaFileRecordBroker methodsFor: 'file-specific' stamp: 'cmm 5/17/2005 23:28'!readHeaderInto: aByteArray	file		maRead: self headerSize		bytesFromPosition: 1		of: aByteArray		atFilePosition: 0! !!MaFileRecordBroker methodsFor: 'file-specific' stamp: 'cmm 7/11/2005 09:03'!writeHeaderFrom: aByteArray	file		maWrite: self headerSize		bytesFromPosition: 1		of: aByteArray		atFilePosition: 0! !!MaFileRecordBroker methodsFor: 'overriding' stamp: 'cmm 5/23/2005 14:11'!nextRecordNumber	^ (file size - self headerSize) / recordSize! !!MaFileRecordBroker methodsFor: 'overriding' stamp: 'cmm 5/23/2005 14:12'!size	^ self nextRecordNumber! !!MaFileRecordBroker methodsFor: 'record' stamp: 'cmm 3/20/2007 21:49'!readInto: aByteArray at: recordIndex 	file 		maRead: recordSize		bytesFromPosition: 1		of: aByteArray		atFilePosition: (self filePositionFor: recordIndex)! !!MaFileRecordBroker methodsFor: 'record' stamp: 'cmm 3/20/2007 21:47'!writeFrom: aByteArray at: recordIndex 	file 		maWrite: recordSize		bytesFromPosition: 1		of: aByteArray		atFilePosition: (self filePositionFor: recordIndex)! !!MaFileRecordBroker methodsFor: '*magma-server' stamp: 'cmm 10/22/2006 15:02'!filePool: aMaFileStreamPool 	file maIsTransactional ifTrue: [ file pool: aMaFileStreamPool ]! !!MaFileRecordBroker methodsFor: '*magma-server-recovery' stamp: 'cmm 7/6/2005 22:52'!filesDo: oneArgBlock	oneArgBlock value: file! !!MaFileRecordBroker methodsFor: '*magma-server-recovery' stamp: 'cmm 4/10/2007 22:35'!unapplyUsing: aMaApplyRecord 	aMaApplyRecord unapplySelf: file! !MaRecordBroker subclass: #MaInImageRecordBroker	instanceVariableNames: 'records'	classVariableNames: ''	poolDictionaries: ''	category: 'Ma-Collections-Records'!!MaInImageRecordBroker methodsFor: 'initialize' stamp: 'cmm 5/23/2005 17:22'!initialize	super initialize.	records := OrderedCollection new! !!MaInImageRecordBroker methodsFor: 'initialize' stamp: 'cmm 5/23/2005 14:34'!nextRecordNumber	^ records size! !!MaInImageRecordBroker methodsFor: 'overriding' stamp: 'cmm 4/5/2007 00:20'!readInto: aByteArray at: recordIndex 	"Since records can be 0-based (sigh), we +1 the recordIndex."	aByteArray 		replaceFrom: 1		to: aByteArray size		with: (records at: recordIndex + 1)		startingAt: 1! !!MaInImageRecordBroker methodsFor: 'overriding' stamp: 'cmm 4/8/2007 18:42'!writeFrom: aByteArray at: recordIndex 	[ records size < (recordIndex + 1) ] whileTrue: [ records add: nil ].	records 		at: recordIndex + 1		put: aByteArray copy! !