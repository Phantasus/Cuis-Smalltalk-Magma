MaObject subclass: #MagmaStressTest	instanceVariableNames: 'config session uuid collection counter'	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Tools-Stress Tester'!!MagmaStressTest methodsFor: 'private' stamp: 'cmm 12/17/2008 13:17'!commitAnother	"Submit another entry to the collection."	collection add: self newEntry.	session commitAndBegin! !!MagmaStressTest methodsFor: 'private' stamp: 'cmm 1/2/2009 15:59'!incrementCounter	^ counter := counter + 1! !!MagmaStressTest methodsFor: 'private' stamp: 'cmm 1/2/2009 15:59'!newEntry	^ Association 		key: self incrementCounter		value: {  uuid. (self newObjectArray)  }! !!MagmaStressTest methodsFor: 'private' stamp: 'cmm 12/17/2008 12:58'!newObjectArray	^ (1 to: config objectsPerCommit) collect: [ : each | Object new ]! !!MagmaStressTest methodsFor: 'private' stamp: 'cmm 12/17/2008 12:51'!session	"The MagmaSession used to wail on the server."	^ session! !!MagmaStressTest methodsFor: 'access' stamp: 'cmm 12/17/2008 13:04'!configuration	"Answer theMagmaStressTestConfiguration used to guide the receiver."	^ config! !!MagmaStressTest methodsFor: 'access' stamp: 'cmm 12/17/2008 20:43'!floodServerUntil: untilBlock 	collection ifNil: [ collection := session root at: #collection ].	session inTransaction ifFalse: [ session begin ].	untilBlock whileFalse: [ self commitAnother ]! !!MagmaStressTest methodsFor: 'initialize-release' stamp: 'cmm 12/17/2008 14:42'!configuration: aMagmaStressTestConfiguration 	config := aMagmaStressTestConfiguration! !!MagmaStressTest methodsFor: 'initialize-release' stamp: 'cmm 1/2/2009 15:59'!initialize	super initialize.	config := MagmaStressTestConfiguration new.	uuid := UUID new.	counter := 0! !!MagmaStressTest methodsFor: 'initialize-release' stamp: 'cmm 12/17/2008 20:44'!session: aMagmaSession 	session := aMagmaSession! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MagmaStressTest class	instanceVariableNames: ''!!MagmaStressTest class methodsFor: 'run' stamp: 'cmm 12/21/2008 15:16'!clientStressorImageName	^ '_stressTestClient'! !!MagmaStressTest class methodsFor: 'run' stamp: 'cmm 12/19/2008 15:03'!createFrom: configurations at: aMagmaRemoteLocation 	"Collect MagmaSessions connected to aMagmaRemoteLocation for each instance of configurations.  An inspector to a connected stressor is opened for each configuration.  They must be told to flood separately."	^ configurations collect: 		[ : each | 		| sess stressor |		sess := aMagmaRemoteLocation newSession user: (MagmaUser id: each printString).		"Minute-by-minute for the last week."		sess statistics snapshotInterval: (1 to: 60 * 24 * 7 by: 1).		stressor := self 			session: sess			configuration: each.		stressor inspect ]! !!MagmaStressTest class methodsFor: 'run' stamp: 'cmm 12/17/2008 20:08'!prepareStressors: configurations at: aMagmaRemoteLocation andSaveClientStressorAs: newImageName 	"Create new MagmaStressTestors based on configurations, but save-and-exit the image before flooding the server.  This allows this saved image to simply be started on any machine to add to the server stress."	| stressors |	stressors := self 		createFrom: configurations		at: aMagmaRemoteLocation.	self saveAndExitAs: newImageName.	stressors do: [ : each | [ each floodServerUntil: [ false ] ] fork ]! !!MagmaStressTest class methodsFor: 'run' stamp: 'cmm 12/18/2008 18:29'!saveAsServerImageAndExit	self saveAsServerImageAndExitPort: self port ! !!MagmaStressTest class methodsFor: 'run' stamp: 'cmm 4/9/2015 21:48'!saveAsServerImageAndExitPort: portInteger 	| console |	self saveAndExitAs: '_stressTestServer' , portInteger asString.	console := MagmaServerConsole new.	"Capture stats minute-by-minute for the last week."	console statistics snapshotInterval: (1 to: 60 * 24 * 7 by: 1).	console		open: MagmaStressTest dbName , portInteger asString ;		processOn: portInteger ;		useCompression: false.	portInteger = self port ifTrue: 		[ (Delay forSeconds: 6) wait. console controller fullBackupToServerPath: 'stressTest' , (portInteger + 1) asString ].	"Reference globally to eliminate chance of garbage-collect."	console inspect! !!MagmaStressTest class methodsFor: 'run' stamp: 'cmm 1/2/2009 15:18'!saveClientStressorImageAndExitConnectingTo: hostName self saveClientStressorImageAndExitConnectingTo: hostName port: self port! !!MagmaStressTest class methodsFor: 'run' stamp: 'cmm 1/2/2009 15:17'!saveClientStressorImageAndExitConnectingTo: hostName port: portInteger	| conf loc |	conf := MagmaStressTestConfiguration new		objectsPerCommit: 10 ;		yourself.	loc := MagmaRemoteLocation 		host: hostName		port: portInteger.	MagmaStressTest 		prepareStressors: {  conf  }		at: loc		andSaveClientStressorAs: self clientStressorImageName! !!MagmaStressTest class methodsFor: 'initialize' stamp: 'cmm 1/2/2009 15:41'!createRepository	MagmaRepositoryController 		create: self dbName, self port asString		root: (Dictionary new				at: #collection					put: self newFixture ;				yourself)! !!MagmaStressTest class methodsFor: 'initialize' stamp: 'cmm 12/17/2008 10:52'!dbName	^ 'stressTest'! !!MagmaStressTest class methodsFor: 'initialize' stamp: 'cmm 1/2/2009 15:41'!deleteRepository	MagmaRepositoryController delete: self dbName, self port asString! !!MagmaStressTest class methodsFor: 'initialize' stamp: 'cmm 1/2/2009 15:57'!newFixture	^ MagmaCollection new		addIndex: (MaIntegerIndex attribute: #key) ;		yourself! !!MagmaStressTest class methodsFor: 'initialize' stamp: 'cmm 12/17/2008 13:19'!resetRepository		[ self		deleteRepository ;		createRepository ] 		on: MagmaDeleteWarning		do: [ : warn | warn resume ]! !!MagmaStressTest class methodsFor: 'private' stamp: 'cmm 5/13/2010 20:42'!fullScreenOff	(Smalltalk classNamed: #ScreenController)		ifNotNilDo: [:sc | sc new fullScreenOff].	"Easier window management in the OS by sizing the windows down.."	(Smalltalk classNamed: #Display)		ifNotNilDo: 			[ : disp | 			disp class				depth: Display depth				width: Display width * 3 // 4				height: Display height * 3 // 4				fullscreen: false].	(Smalltalk classNamed: #World)		ifNotNilDo: [:world | world doOneCycleNow]! !!MagmaStressTest class methodsFor: 'private' stamp: 'cmm 4/11/2010 18:10'!saveAndExitAs: imageName 	"Save the image under the name, imageName."	self fullScreenOff.	SmalltalkImage current maSaveAs: (SmalltalkImage current fullNameForImageNamed: imageName).	SmalltalkImage current 		snapshot: true		andQuit: true! !!MagmaStressTest class methodsFor: 'accessing' stamp: 'cmm 12/17/2008 14:37'!port	^ 51801! !!MagmaStressTest class methodsFor: 'create' stamp: 'cmm 12/17/2008 13:21'!session: aMagmaSession configuration: aMagmaStressTestConfiguration 	^ self new		session: aMagmaSession ;		configuration: aMagmaStressTestConfiguration ;		yourself! !MaObject subclass: #MagmaStressTestConfiguration	instanceVariableNames: 'objectsPerCommit'	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Tools-Stress Tester'!!MagmaStressTestConfiguration methodsFor: 'initialize-release' stamp: 'cmm 12/17/2008 12:43'!initialize	super initialize.	objectsPerCommit := 1! !!MagmaStressTestConfiguration methodsFor: 'accessing' stamp: 'cmm 12/17/2008 12:41'!objectsPerCommit	^objectsPerCommit! !!MagmaStressTestConfiguration methodsFor: 'accessing' stamp: 'cmm 12/17/2008 12:41'!objectsPerCommit: anInteger	objectsPerCommit := anInteger! !!MagmaStressTestConfiguration methodsFor: 'printing' stamp: 'cmm 12/17/2008 13:27'!printOn: aStream 	self 		maPrintAttribute: #objectsPerCommit		on: aStream! !