Exception subclass: #MaRequest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Ma-Core-Requests'!MaRequest subclass: #MaStringRequest	instanceVariableNames: 'initialAnswer'	classVariableNames: ''	poolDictionaries: ''	category: 'Ma-Core-Requests'!!MaStringRequest commentStamp: 'cmm 10/9/2005 12:01' prior: 0!Some applications need to prompt the user for a String at an inopportune time; for example some operations may require the users privateKey file and we want to do this on a JIT basis.The purpose of this class is to provide a default way to ask the user for a String while allowing programs to override with their own approach.!!MaStringRequest methodsFor: 'initialize-release' stamp: 'cmm 12/7/2011 21:49'!defaultAction	self resume:		(UIManager default 			request: self messageText			initialAnswer: self initialAnswer)! !!MaStringRequest methodsFor: 'initialize-release' stamp: 'cmm 9/27/2005 00:49'!initialAnswer: aString	initialAnswer := aString! !!MaStringRequest methodsFor: 'accessing' stamp: 'cmm 3/1/2012 21:30'!initialAnswer	^ initialAnswer ifNil: [ String empty ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MaStringRequest class	instanceVariableNames: ''!!MaStringRequest class methodsFor: 'create' stamp: 'cmm 9/27/2005 00:49'!messageText: messageString initialAnswer: initialAnswerString	^ (self messageText: messageString) 		initialAnswer: initialAnswerString ;		yourself! !MaStringRequest subclass: #MaFileRequest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Ma-Core-Requests'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MaFileRequest class	instanceVariableNames: ''!!MaFileRequest class methodsFor: 'create' stamp: 'cmm 11/16/2005 22:11'!message: aString filename: filenameString initialDirectory: aFileDirectory	^ self new		messageText: aString, '.  Where is ', filenameString, '?' ;		initialAnswer: aFileDirectory fullName ;		yourself! !MaNotification subclass: #MagmaSessionRequest	instanceVariableNames: 'doBlock'	classVariableNames: ''	poolDictionaries: 'MaCoreConstants'	category: 'Ma-Core-Requests'!!MagmaSessionRequest commentStamp: 'cmm 1/13/2005 23:08' prior: 0!I am used to signal to the session controller a session directive, such as connect, commit, abort, disconnect, or others.Use my class-side api in your domain code.  For example, in your setters:	name: aString		MagmaSessionRequest signalCommit: [ name _ aString ]When Magma is not used, the session request has no effect.!!MagmaSessionRequest methodsFor: 'private' stamp: 'cmm 3/20/2003 01:05'!doBlock: oneArgBlock	doBlock := oneArgBlock! !!MagmaSessionRequest methodsFor: 'handler' stamp: 'cmm 9/8/2012 17:58'!handleAndResumeUsing: aMagmaSession 	self resume: (self handleUsing: aMagmaSession)! !!MagmaSessionRequest methodsFor: 'handler' stamp: 'cmm 9/8/2012 17:57'!handleUsing: aMagmaSession 	aMagmaSession ifNotNil: [ doBlock value: aMagmaSession ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MagmaSessionRequest class	instanceVariableNames: ''!!MagmaSessionRequest class methodsFor: 'private' stamp: 'cmm 4/22/2003 23:41'!signal: aString do: oneArgBlock	"oneArgBlock takes the session that you wish to do something to."	^self new		messageText: aString;		doBlock: oneArgBlock;		signal! !!MagmaSessionRequest class methodsFor: 'signaling' stamp: 'cmm 4/24/2003 15:00'!signalAbort	self 		signal: 'aborting transaction'		do: [ :session | session abort ]! !!MagmaSessionRequest class methodsFor: 'signaling' stamp: 'cmm 4/22/2003 23:42'!signalBegin	self 		signal: 'beginning transaction'		do: [ :session | session begin ]! !!MagmaSessionRequest class methodsFor: 'signaling' stamp: 'cmm 9/3/2014 10:49'!signalClean	self 		signal: 'cleaning session'		do: [ :session | session clean ]! !!MagmaSessionRequest class methodsFor: 'signaling' stamp: 'cmm 4/22/2003 23:43'!signalCommit	self 		signal: 'committing transaction'		do: [ :session | session commit ]! !!MagmaSessionRequest class methodsFor: 'signaling' stamp: 'cmm 6/22/2012 13:08'!signalCommit: aBlock 	| result |	self signalBegin.	result := HasMagma		ifTrue: [ aBlock valueWhileObservingStateChange ]		ifFalse: [ aBlock value ].	self signalCommit.	^ result! !!MagmaSessionRequest class methodsFor: 'signaling' stamp: 'cmm 4/22/2003 23:50'!signalCommitAndBegin	self 		signal: 'committing transaction and beginning a new one'		do: [ :session | session commitAndBegin ]! !!MagmaSessionRequest class methodsFor: 'signaling' stamp: 'cmm 9/12/2014 15:10'!signalDisconnect	self 		signal: 'disconnecting session'		do: [ :session | session disconnect ]! !!MagmaSessionRequest class methodsFor: 'signaling' stamp: 'cmm 9/1/2010 13:09'!signalNewGlobalReadStrategy: aMaReadStrategy	self 		signal: 'setting global read-strategy'		do: [ :session | session globalReadStrategy: aMaReadStrategy ]! !!MagmaSessionRequest class methodsFor: 'signaling' stamp: 'cmm 7/17/2010 17:56'!signalNewReadStrategy: aMaReadStrategy	self 		signal: 'setting read-strategy'		do: [ :session | session readStrategy: aMaReadStrategy ]! !!MagmaSessionRequest class methodsFor: 'signaling' stamp: 'cmm 8/2/2009 17:06'!signalNoteOldKeysFor: anObject 	self 		signal: 'noting old keys'		do: [ : session | session noteOldKeysFor: anObject ]! !!MagmaSessionRequest class methodsFor: 'signaling' stamp: 'cmm 11/18/2010 18:21'!signalRefresh	self		signal: 'refreshing repository view'		do: [ : session | session refresh ]! !!MagmaSessionRequest class methodsFor: 'signaling' stamp: 'cmm 10/13/2012 23:00'!signalSetRetrySeconds: anInteger	self 		signal: 'setting retrySeconds to ', anInteger		do: [ :session | session retrySeconds: anInteger ]! !!MagmaSessionRequest class methodsFor: 'signaling' stamp: 'cmm 7/4/2012 14:33'!signalSetTimeoutSeconds: anInteger	self 		signal: 'setting timeout to ', anInteger, ' seconds'		do: [ :session | session timeoutSeconds: anInteger ]! !!MagmaSessionRequest class methodsFor: 'signaling' stamp: 'cmm 8/2/2009 17:06'!signalStubOut: anObject 	self 		signal: 'stub out'		do: [ : session | session stubOut: anObject ]! !!MagmaSessionRequest class methodsFor: 'signaling' stamp: 'cmm 3/13/2013 15:15'!signalStubOutAll: aCollection 	self 		signal: 'stub out ', aCollection size, ' objects.'		do: [ : session | session stubOutAll: aCollection ]! !