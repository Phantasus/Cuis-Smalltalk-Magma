MaTestCase subclass: #MaNetworkTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Ma-Client-Server-Tester-SUnit extensions'!!MaNetworkTestCase commentStamp: '<historical>' prior: 0!My subclasses are intended to test network programs.  I provide methods for communicating with other images and tunnelling requests to them.!!MaNetworkTestCase methodsFor: 'accessing' stamp: 'cmm 1/3/2013 14:23'!orchestra	^ suite orchestra! !!MaNetworkTestCase methodsFor: 'accessing' stamp: 'cmm 1/5/2013 10:13'!playerProtocol	^ {MaRemotePerformRequest}! !!MaNetworkTestCase methodsFor: 'players' stamp: 'cmm 1/3/2013 14:27'!playerLinkNamed: aString 	^ self orchestra playerNamed: aString! !!MaNetworkTestCase methodsFor: 'players' stamp: 'cmm 1/3/2013 14:27'!playersDo: aBlock 	 self orchestra players do: aBlock! !!MaNetworkTestCase methodsFor: 'players' stamp: 'cmm 1/3/2013 14:27'!pushClass: aClass 	self orchestra players do:		[ : each | each pushClass: aClass ]! !!MaNetworkTestCase methodsFor: 'players' stamp: 'cmm 4/23/2013 13:05'!remotePerform: selectorSymbol in: playerName 	^ self		remotePerform: selectorSymbol		withArguments: Array empty		in: playerName! !!MaNetworkTestCase methodsFor: 'players' stamp: 'cmm 1/10/2013 13:10'!remotePerform: selectorSymbol with: arg1 in: playerName 	^ self		remotePerform: selectorSymbol		withArguments: {arg1}		in: playerName! !!MaNetworkTestCase methodsFor: 'players' stamp: 'cmm 1/5/2013 16:23'!remotePerform: selectorSymbol withArguments: anArray in: playerName 	MaTestCaseNotification signal: 'remote performing ' , selectorSymbol , ' with arguments ' , anArray printString , ' in ' , playerName.	^ (self playerLinkNamed: playerName)		remotePerform: selectorSymbol		withArguments: anArray! !!MaNetworkTestCase methodsFor: 'printing' stamp: 'cmm 5/3/2002 00:12'!printOn: aStream	testSelector		ifNil: [ aStream nextPutAll: 'a', self class name ]		ifNotNil: [ super printOn: aStream ]! !!MaNetworkTestCase methodsFor: 'server' stamp: 'cmm 1/3/2013 16:18'!snapshot: shouldSave andQuit: shouldQuit 	"Delay enough for response to be sent back to conductor."	[ (Delay forSeconds: 1) wait.	self orchestra homePlayer stop.	Smalltalk		snapshot: shouldSave		andQuit: shouldQuit ] fork.	^ nil! !!MaNetworkTestCase methodsFor: 'server' stamp: 'cmm 1/3/2013 09:50'!value: aMacsClientRequest 	| result |	result := aMacsClientRequest processFor: self.	^ result == self ifFalse: [ result ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MaNetworkTestCase class	instanceVariableNames: ''!!MaNetworkTestCase class methodsFor: 'overriding' stamp: 'cmm 1/2/2013 16:09'!isAbstract	^ super isAbstract or: [ self name = #MaNetworkTestCase ]! !!MaNetworkTestCase class methodsFor: 'overriding' stamp: 'cmm 1/3/2013 15:08'!suiteClass	^ MaClientServerTestSuite! !TestSuite subclass: #MaNetworkTestSuite	instanceVariableNames: 'orchestra'	classVariableNames: ''	poolDictionaries: ''	category: 'Ma-Client-Server-Tester-SUnit extensions'!!MaNetworkTestSuite commentStamp: 'cmm 1/4/2013 16:47' prior: 0!A MaNetworkTestSuite is a suite for testing network programs.  By employing a NetworkOrchestra made up of at least one server image and two client images, a fourth "test conductor" is able to direct a test suite that exercises the network program.!!MaNetworkTestSuite methodsFor: 'setup-teardown' stamp: 'cmm 11/5/2013 17:07'!createOrchestra	| orch testCase |	testCase := self tests anyOne.	orch := (MaNetworkOrchestra name: '_' , self suiteName , 'Test')		 protocol: testCase playerProtocol ;		 timeoutSeconds: 172800 ;		 onePlayerImage: false ;		 firstPort: self startingPort ;		 yourself.	self playerNames do:		[ : each | orch addPlayer:			(MaNetworkPlayer new				 name: each ;				 server:					((MaNetworkRequestServer protocol: orch protocol)						 processor: testCase ;						 yourself)) ].	^ orch! !!MaNetworkTestSuite methodsFor: 'setup-teardown' stamp: 'cmm 12/5/2011 21:46'!findATranscript	(Smalltalk		at: #World		ifAbsent: [  ]) ifNotNilDo: [ : world | world findATranscript: nil ]! !!MaNetworkTestSuite methodsFor: 'setup-teardown' stamp: 'cmm 11/5/2013 16:32'!launchOrchestra	MaClientServerPreferences debug: true.	ScreenController new fullScreenOff.	(orchestra := self createOrchestra) launch.	orchestra isConductorImage ifTrue: [ orchestra waitForAllPlayersReady ]! !!MaNetworkTestSuite methodsFor: 'setup-teardown' stamp: 'cmm 1/3/2013 17:24'!setUp	World color: ((Color random) adjustSaturation: -0.5 brightness: 0.0).	MaClientServerPreferences debug: true.	self launchOrchestra.	self orchestra isConductorImage ifTrue: [ self findATranscript ]! !!MaNetworkTestSuite methodsFor: 'setup-teardown' stamp: 'cmm 11/5/2013 16:41'!tearDown	orchestra isConductorImage ifTrue:		[ orchestra			 shutDownPlayers ;			 deleteImages ]! !!MaNetworkTestSuite methodsFor: 'overriding' stamp: 'cmm 1/3/2013 14:38'!debug	self tests isEmpty ifTrue: [ ^ self ].	[ self setUp ]		on: MaNotification		do:			[ : noti | Transcript				 cr ;				 show: noti messageText.			noti resume ].	[ self orchestra isConductorImage ifTrue:		[ | durationToRun |		durationToRun := [ super debug ] durationToRun.		Transcript			 cr ;			 show: 'Time to run all tests:' , durationToRun asString ] ] ensure:		[ [ self tearDown ]			on: MaNotification			do:				[ : noti | Transcript					 cr ;					 show: noti messageText.				noti resume ].		Transcript			 cr ;			 show: 'Done.' ]! !!MaNetworkTestSuite methodsFor: 'accessing' stamp: 'cmm 1/3/2013 15:29'!orchestra	^ orchestra! !!MaNetworkTestSuite methodsFor: 'accessing' stamp: 'cmm 2/6/2009 17:19'!suiteName	self subclassResponsibility ! !!MaNetworkTestSuite methodsFor: 'players' stamp: 'cmm 1/1/2013 15:00'!playerNames	self subclassResponsibility! !