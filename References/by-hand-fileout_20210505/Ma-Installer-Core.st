Installer subclass: #MaInstaller	instanceVariableNames: 'host port writeBarrier readStrategy allowLongCatchUp retrySeconds timeoutSeconds'	classVariableNames: ''	poolDictionaries: ''	category: 'Ma-Installer-Core'!!MaInstaller commentStamp: 'cmm 8/3/2012 13:46' prior: 0!A MaInstaller is a single class capable of installing and configuring Muller Automation software packages.My 'structures' category defines the dependency-hierarchies of the packages.!!MaInstaller methodsFor: 'lists' stamp: 'cmm 9/27/2012 17:15'!allApplications	^ self class methodsInCategory: 'applications'! !!MaInstaller methodsFor: 'magma' stamp: 'cmm 9/11/2012 16:31'!allLocations	| locations |	locations := OrderedCollection new.	{self hosts. 	self ports} maPermutationsDo:		[ : eachHostAndPort | locations add:			(self				locationAt: eachHostAndPort first				port: eachHostAndPort second) ].	^ locations sort: [ : a : b | a host < b host ]! !!MaInstaller methodsFor: 'magma' stamp: 'cmm 5/22/2013 16:57'!chasePointerToAnyLocalMagmaSession	(Smalltalk classNamed: #MagmaSession) ifNotNil:		[ : magmaSession | magmaSession allInstances do:			[ : each | each isLocal ifTrue: [ self chasePointerToMagmaSession: each ] ] ]! !!MaInstaller methodsFor: 'magma' stamp: 'cmm 5/22/2013 16:58'!chasePointerToAnyMagmaSession	(Smalltalk classNamed: #MagmaSession)		ifNil: [ self error: 'Magma not installed' ]		ifNotNil:			[ : magmaSession | self chasePointerToMagmaSession: magmaSession allInstances atRandom ]! !!MaInstaller methodsFor: 'magma' stamp: 'cmm 5/22/2013 16:57'!chasePointerToMagmaSession: aMagmaSession 	(Smalltalk classNamed: #MagmaPreferences) debugProxiesWhile: [ aMagmaSession chasePointers ]! !!MaInstaller methodsFor: 'magma' stamp: 'cmm 2/2/2013 17:38'!magmaCleanUp	^ (Smalltalk classNamed: #MagmaSession) ifNotNil:		[ : magmaSession | magmaSession cleanUp ]! !!MaInstaller methodsFor: 'magma' stamp: 'cmm 3/2/2013 11:56'!magmaSessionInstances	^ (Smalltalk classNamed: #MagmaSession)		ifNil: [ Array empty ]		ifNotNil: [ : magmaSession | magmaSession allInstances ]! !!MaInstaller methodsFor: 'magma' stamp: 'cmm 12/19/2013 21:32'!runMagmaTestSuite	^ (Smalltalk classNamed: #MagmaTestCase)		ifNil:			[ Warning signal: 'The magmaTester package must be loaded to do this.  It will be loaded now.'.			self				 merge: #magmaTester ;				 runMagmaTestSuite ]		ifNotNil:			[ : magmaTestCase | [ magmaTestCase suite debug ]				on: (Smalltalk classNamed: #MagmaWarning)				do: [ : warn | warn resume ] ]! !!MaInstaller methodsFor: 'configure' stamp: 'cmm 8/7/2014 17:11'!allowLongCatchUp: aBoolean	allowLongCatchUp := aBoolean! !!MaInstaller methodsFor: 'configure' stamp: 'cmm 6/2/2016 19:53'!configure	DateAndTime automaticTimezone: true! !!MaInstaller methodsFor: 'configure' stamp: 'cmm 4/3/2013 17:12'!deleteAllWindows	(SystemWindow		windowsIn: ActiveWorld		satisfying:			[ : window | true ]) do:				[ : window | [ window makeClosable; delete ]					on: ProvideAnswerNotification					do: [ : noti | noti resume: true ] ]! !!MaInstaller methodsFor: 'configure' stamp: 'cmm 8/9/2012 20:19'!host: aString	host := aString! !!MaInstaller methodsFor: 'configure' stamp: 'cmm 8/9/2012 19:29'!port: anInteger	port := anInteger! !!MaInstaller methodsFor: 'configure' stamp: 'cmm 1/1/2015 22:15'!readStrategy: selectorSymbol 	readStrategy := selectorSymbol isSymbol		ifTrue: [ self perform: selectorSymbol ]		ifFalse: [ "allow passing in a ReadStrategy directly"			selectorSymbol ]! !!MaInstaller methodsFor: 'configure' stamp: 'cmm 11/16/2014 14:47'!retrySeconds: anInteger	retrySeconds := anInteger! !!MaInstaller methodsFor: 'configure' stamp: 'cmm 11/16/2014 14:47'!timeoutSeconds: anInteger	timeoutSeconds := anInteger! !!MaInstaller methodsFor: 'configure' stamp: 'cmm 8/9/2012 19:29'!writeBarrier: aBoolean	writeBarrier:=aBoolean! !!MaInstaller methodsFor: 'package-definitions' stamp: 'cmm 9/6/2018 16:22'!ast	^ { #squeaksource -> 'rb'.	'AST-Core'.	'AST-Semantic'.	'AST-Tests-Core'.	'AST-Tests-Semantic' }! !!MaInstaller methodsFor: 'package-definitions' stamp: 'cmm 11/7/2018 20:43'!audiotron	^ {self maUi.	#ss -> 'Audiotron'.	'Audiotron'.	'Audiotron.MauiFamily'}! !!MaInstaller methodsFor: 'package-definitions' stamp: 'cmm 11/7/2018 20:42'!banyan	^ {self base. 	#ss -> 'Banyan'.	'Banyan'}! !!MaInstaller methodsFor: 'package-definitions' stamp: 'cmm 8/25/2015 10:53'!banyanMaui	^ {self banyan. 	self maUiMaui.	'Banyan.MauiFamily'}! !!MaInstaller methodsFor: 'package-definitions' stamp: 'cmm 11/7/2018 20:43'!base	^ { self osProcess. 	self systemModifications.	self plotMorph.	#ss -> 'MaBase'.	'Ma-Core'.	'Ma-Squeak-Core'.	'BrpExtensions'.	'Ma-Search'.	'Ma-Collections'.	'Ma-Ascii-Report'.	'Ma-Statistics' }! !!MaInstaller methodsFor: 'package-definitions' stamp: 'cmm 11/7/2018 20:42'!clientServer	^ { self serializer.	self rfb.	#ss -> 'MaClientServer'.	'Ma-Client-Server-Core' }! !!MaInstaller methodsFor: 'package-definitions' stamp: 'cmm 7/28/2015 17:32'!clientServerTester	^ { self clientServer.	#ss -> 'MaClientServer'.	'Ma-Client-Server-Tester' }! !!MaInstaller methodsFor: 'package-definitions' stamp: 'cmm 7/28/2015 14:42'!htmlParser	^ { #ss -> 'htmlcssparser'. 	'HTML' }! !!MaInstaller methodsFor: 'package-definitions' stamp: 'cmm 4/16/2018 19:52'!maCommercialInstaller	^ { #local -> 'MaInstaller'.	'Ma-Installer-Commercial' }! !!MaInstaller methodsFor: 'package-definitions' stamp: 'cmm 12/23/2016 15:24'!maSarPackage	^ { self maUi.	'MaSarPackage'.	'MaSarPackage.MauiFamily' }! !!MaInstaller methodsFor: 'package-definitions' stamp: 'cmm 8/25/2015 10:52'!maUi	"We can't name this maui because that's needed to maui the receiver!!"	^ {self serializer. 	self connectors.	#ss -> 'Maui'.	'Maui-Core' }! !!MaInstaller methodsFor: 'package-definitions' stamp: 'cmm 5/5/2016 23:50'!maUiMaui	"Loads Maui code pre-req (maUi) followed by these core .MauiFamily object files which are user-defined UI's for some core objects."	^ { self maUi.	'Maui-Core.MauiFamily'.	'Kernel.MauiFamily'.	'Collections.MauiFamily'.	'PackageInfo-Base.MauiFamily'."	'Ma-Core.MauiFamily'.""	'Ma-Search.MauiFamily'."	'Ma-Statistics.MauiFamily'.	self installerMauiFamily }! !!MaInstaller methodsFor: 'package-definitions' stamp: 'cmm 7/28/2015 14:43'!magmaClient	^ {self clientServer.	self plotMorph.	#ss -> 'Magma'.	'WriteBarrier'. 	'SOLHashTables'.	'Magma-Client'. 	'Magma-Squeak-Client'}! !!MaInstaller methodsFor: 'package-definitions' stamp: 'cmm 8/25/2015 10:54'!magmaClientMaui	^ { self magmaClient.	self maUiMaui.	'Magma-Client.MauiFamily' }! !!MaInstaller methodsFor: 'package-definitions' stamp: 'cmm 7/28/2015 14:43'!magmaServer	^ {self magmaClient.	#ss -> 'Magma'.	'Magma-Server'}! !!MaInstaller methodsFor: 'package-definitions' stamp: 'cmm 7/28/2015 14:18'!magmaTester	^ {self magmaServer.	self clientServerTester.	self serializerTests.	#ss -> 'Magma'.	'Magma-Tester'}! !!MaInstaller methodsFor: 'package-definitions' stamp: 'cmm 7/28/2015 14:43'!magmaTools	^ { self magmaServer.	#ss -> 'Magma'.	'Magma-Tools' }! !!MaInstaller methodsFor: 'package-definitions' stamp: 'cmm 7/28/2015 16:08'!plotMorph	^ { #ss -> 'PlotMorph'.	'PlotMorph' }! !!MaInstaller methodsFor: 'package-definitions' stamp: 'cmm 9/6/2018 16:34'!refactoringTests	^ { self refactoringTools.	#squeaksource -> 'rb'.	'Refactoring-Tests-Core'.	'Refactoring-Tests-Changes'.	'Refactoring-Tests-Environment'.	'Refactoring-Tests-Critics'.	'Refactoring-Tests-Spelling'.	'Refactoring-Squeak-Platform' }! !!MaInstaller methodsFor: 'package-definitions' stamp: 'cmm 9/6/2018 16:46'!refactoringTools	^ { self ast. 	#squeaksource -> 'rb'. 	'Refactoring-Core'. 	'Refactoring-Changes'. 	'Refactoring-Environment'. 	'Refactoring-Critics'. 	'Refactoring-Spelling'.	#ss3 -> 'RefactoringToolsForSqueak'.	'RefactoringTools' }! !!MaInstaller methodsFor: 'package-definitions' stamp: 'cmm 7/4/2016 21:06'!rfb	^ { #squeak -> 'ss'.	'RFB' }! !!MaInstaller methodsFor: 'package-definitions' stamp: 'cmm 12/12/2015 07:50'!serializer	^ {self base.	#ss -> 'MaBase'.	'Ma-Serializer-Core'. 	'Ma-Serializer-Squeak-Core'}! !!MaInstaller methodsFor: 'package-definitions' stamp: 'cmm 7/28/2015 14:48'!serializerTests	^ {self serializer.	#ss -> 'MaBase'.	'Ma-Serializer-Tests'}! !!MaInstaller methodsFor: 'package-definitions' stamp: 'cmm 2/20/2014 11:18'!systemModifications	"Enhanced versions of base packages.  Include my own package in case there has been an updated version saved into the repository.	Subclasses override."	^ Array empty! !!MaInstaller methodsFor: 'api' stamp: 'cmm 12/29/2015 10:52'!close: anObject	self class close: anObject! !!MaInstaller methodsFor: 'api' stamp: 'cmm 7/23/2017 22:01'!connect: applicationName 	"Merge all packages and make the root object of the specified application the current object accessible by the menu."	| session object |	session := self session: applicationName.	self makeReadStrategy ifNotNil:		[ : readStrategy | session readStrategy: readStrategy ].	object := session root.	object isMagmaWorld ifTrue:		[ object			 validateDomainVersion ;			 beCurrent ].	^ object! !!MaInstaller methodsFor: 'api' stamp: 'cmm 1/4/2016 14:50'!customConnect: applicationName 	^ self perform: applicationName asSymbol! !!MaInstaller methodsFor: 'api' stamp: 'cmm 12/29/2015 14:15'!open: applicationName 	"Merge all packages and present the root object of the specified application (from the client-uis protocol)."	| object |	object := self connect: applicationName.	Smalltalk hasMaui		ifTrue:			[ | widget |			widget := object maui.			widget notificationHandler: object magmaSession ]		ifFalse: [ object inspect ]! !!MaInstaller methodsFor: 'private' stamp: 'cmm 2/7/2016 14:57'!configureUsing: arrayOfAssociations 	"Configure this object with the specified key-value associations.  These are the definitions in the 'applications' category, NOT the package-definitions category."	arrayOfAssociations do:		[ : each | each isVariableBinding			ifTrue:				[ self					perform: each key					with: each value ]			ifFalse:				[ each isArray ifTrue: [ self configureUsing: each ] ] ]! !!MaInstaller methodsFor: 'private' stamp: 'cmm 8/2/2012 22:06'!currentInfoForPackageNamed: aString 	^ (MCWorkingCopy allManagers		detect: [ : each | each packageName = aString ]		ifNone: [ self error: 'This operation requires the packages to be loaded.' ]) ancestors anyOne! !!MaInstaller methodsFor: 'private' stamp: 'cmm 5/5/2016 23:49'!installerMauiFamily	^ 'Ma-Installer-Core.MauiFamily'! !!MaInstaller methodsFor: 'private' stamp: 'cmm 8/27/2012 19:58'!location	^ (Smalltalk classNamed: #MagmaRemoteLocation)		ifNil: [ self error: 'MaInstaller problem.  Magma-Client must be installed before this can be done.' ]		ifNotNil:			[ : locationClass | locationClass				host: host				port: port ]! !!MaInstaller methodsFor: 'private' stamp: 'cmm 12/19/2013 21:33'!locationAt: hostString port: portNumber 	^ (Smalltalk classNamed: #MagmaRemoteLocation)		ifNil:			[ Warning signal: 'Magma-Client must be loaded to do this.  Magma-Client will now be loaded.'.			self				 merge: #magmaClient ;								locationAt: hostString				port: portNumber ]		ifNotNil:			[ : cls | cls				host: hostString				port: portNumber ]! !!MaInstaller methodsFor: 'private' stamp: 'cmm 7/14/2017 15:29'!makeReadStrategy	^ readStrategy isSymbol		ifTrue: [ self perform: readStrategy ]		ifFalse: [ readStrategy "or nil" ]! !!MaInstaller methodsFor: 'private' stamp: 'cmm 9/27/2012 17:32'!mauiDefaultView	^ 'Main'! !!MaInstaller methodsFor: 'private' stamp: 'cmm 8/27/2012 19:46'!mergeMauiFamily: filename 	(Smalltalk classNamed: #MauiFamily)		ifNil: [ self error: 'Problem with MaInstaller.  Maui must be installed before ' , filename , ' can be.' ]		ifNotNil:			[ : mauiFamilyClass | (self projectDirectoryFor: filename) in:				[ : dir | (dir fileExists: filename)					ifTrue: [ mauiFamilyClass fileInFileNamed: (dir fullNameFor: filename) ]					ifFalse: [ self warnNotFound: filename ] ] ]! !!MaInstaller methodsFor: 'private' stamp: 'cmm 2/20/2014 13:04'!newSession	| sess |	sess := self location newSession		 connectAs: Utilities authorInitials , '@' , (FileDirectory localNameFor: Smalltalk imageName) ;		 yourself.	readStrategy ifNotNil: [ sess readStrategy: readStrategy ].	^ sess! !!MaInstaller methodsFor: 'private' stamp: 'cmm 7/5/2016 11:52'!primMerge: packageName from: aMCRepository 	^ (packageName endsWith: '.MauiFamily')		ifTrue: [ self mergeMauiFamily: packageName. nil ]		ifFalse:			[ super				primMerge: packageName				from: aMCRepository ]! !!MaInstaller methodsFor: 'private' stamp: 'cmm 8/3/2012 15:53'!projectDirectoryFor: filename	"Someday might want to parse up to the first dot of filename to identify a 'project' directory.  Until then, just the default dir since that's how I work."	^ FileDirectory default! !!MaInstaller methodsFor: 'private' stamp: 'cmm 7/23/2017 21:27'!session: applicationName 	"Merge all packages and make the root object of the specified application the current object accessible by the menu."	self configureUsing:		(applicationName isSymbol			ifTrue: [ self perform: applicationName asSymbol ]			ifFalse: [ applicationName ]).	^ self newSession		 allowWriteBarrier: writeBarrier ;		 allowLongCatchUp: allowLongCatchUp ;		 retrySeconds: timeoutSeconds ;		 timeoutSeconds: timeoutSeconds ;		 yourself! !!MaInstaller methodsFor: 'private' stamp: 'cmm 8/3/2012 16:00'!warnNotFound: filename 	Warning signal: ((self projectDirectoryFor: filename) fullNameFor: filename) , ' not found.  Those Maui panels were not loaded.'! !!MaInstaller methodsFor: 'deploy' stamp: 'cmm 7/18/2016 11:25'!copyLocalVersionsToRemote	| reps |	reps := self class symbolicPackages		inject: Set new		into:			[ : set : each | set				 addAll: (self remoteRepositoriesFor: each) ;				 yourself ].	reps do: [ : each | each copyImageVersions ]! !!MaInstaller methodsFor: 'machines' stamp: 'cmm 2/20/2014 10:59'!hosts	"Subclasses override."	^ Array empty! !!MaInstaller methodsFor: 'machines' stamp: 'cmm 2/20/2014 10:59'!ports	"Subclasses override."	^ Array empty! !!MaInstaller methodsFor: 'initialize-release' stamp: 'cmm 11/16/2014 14:25'!initialize	super initialize.	writeBarrier := true.	allowLongCatchUp := true.	timeoutSeconds := retrySeconds := 30! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MaInstaller class	instanceVariableNames: ''!!MaInstaller class methodsFor: 'actions' stamp: 'cmm 2/9/2017 22:32'!close: anObject 	"Close down all windows for the same database as anObject.  Remove any open MauiMorphs whose objects were retrieved from the same magmaSession as for anObject."	| sess |	anObject isMagmaWorld ifTrue:		[ anObject maOriginalClass			 closeMenu ;			 current: nil ].	sess := anObject magmaSession.	sess ifNil: [ ^ anObject ].	(Smalltalk classNamed: #MauiWorld) ifNotNil:		[ : mauiWorldClass | "ensureConnected so that quickMagmaSession is sure to work."		sess isConnected ifFalse: [ sess ensureConnected ].		mauiWorldClass current playersDo:			[ : each | each object quickMagmaSession = sess ifTrue: [ each delete ] ] ].	sess disconnectAndClose! !!MaInstaller class methodsFor: 'class initialization' stamp: 'cmm 8/28/2012 15:49'!initialize	self new configure! !MaInstaller initialize!