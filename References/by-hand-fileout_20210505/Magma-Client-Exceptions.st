MaError subclass: #MaOverflowError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!MaError subclass: #MaUnreadableRecoveryRecord	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!MaObject subclass: #MagmaCommitConflict	instanceVariableNames: 'connection conflictingOids conflictingObjects'	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!!MagmaCommitConflict commentStamp: 'cmm 3/21/2003 00:50' prior: 0!When a MagmaCommitError is signaled, it will have a list of me in it so you can determine the cause of the conflict.  I describe what objects were in conflict (conflictingObjects) and who changed them (connection).conflictingObjects only reflects what is still in your image (e.g., not GC'd).  conflictingOids contains the oid of every object that was in conflict.!!MagmaCommitConflict methodsFor: 'private' stamp: 'cmm 6/26/2002 00:00'!addConflictingOid: oidInteger	conflictingOids add: oidInteger! !!MagmaCommitConflict methodsFor: 'private' stamp: 'cmm 1/17/2014 16:26'!initializeConflictingObjectsUsing: aMaObjectSerializer 	conflictingOids do:		[ : each | | eachConflictingObject |		eachConflictingObject := aMaObjectSerializer objectWithOid: each.		conflictingObjects add: eachConflictingObject -> eachConflictingObject conflictingObjectCopy ].	"The catch-up process does this in pieces, so we now need to removeAll conflictingOids after 'transferring' them to conflictingObjects so it doesn't happen again for subsequent pieces."	conflictingOids removeAll! !!MagmaCommitConflict methodsFor: 'accessing' stamp: 'cmm 2/28/2013 10:44'!comparisons	^ self conflictingObjects collect:		[ : each | MaObjectComparison			with: each key			with: each value ]! !!MagmaCommitConflict methodsFor: 'accessing' stamp: 'cmm 7/5/2004 14:40'!conflictingConnection	^ connection! !!MagmaCommitConflict methodsFor: 'accessing' stamp: 'cmm 6/26/2002 00:01'!conflictingObjects	^conflictingObjects! !!MagmaCommitConflict methodsFor: 'accessing' stamp: 'cmm 6/26/2002 00:01'!conflictingOids	^conflictingOids! !!MagmaCommitConflict methodsFor: 'accessing' stamp: 'cmm 4/5/2013 09:59'!connection	^ connection! !!MagmaCommitConflict methodsFor: 'initializing' stamp: 'cmm 7/5/2004 14:39'!connection: aMagmaClientConnection	connection := aMagmaClientConnection! !!MagmaCommitConflict methodsFor: 'initializing' stamp: 'cmm 1/17/2014 16:22'!initialize	super initialize.	conflictingOids := OrderedCollection new.	conflictingObjects := OrderedCollection new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MagmaCommitConflict class	instanceVariableNames: ''!!MagmaCommitConflict class methodsFor: 'creation' stamp: 'cmm 7/5/2004 14:37'!connection: aMagmaClientConnection	^ self new		connection: aMagmaClientConnection ;		yourself! !MaError subclass: #MagmaCommitError	instanceVariableNames: 'result'	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!!MagmaCommitError commentStamp: 'cmm 3/21/2003 00:50' prior: 0!I am signaled when another user has committed a change an object that you changed since you began your transaction.!!MagmaCommitError methodsFor: 'private' stamp: 'cmm 10/20/2014 12:40'!handleOrPassUsing: aMagmaSession	self pass! !!MagmaCommitError methodsFor: 'printing' stamp: 'cmm 5/17/2013 13:18'!printDetailsOn: aStream 	super printDetailsOn: aStream.	result ifNotNil: [ result printDetailsOn: aStream ]! !!MagmaCommitError methodsFor: 'accessing' stamp: 'cmm 12/17/2002 23:59'!result	^result! !!MagmaCommitError methodsFor: 'initialize-release' stamp: 'cmm 1/17/2014 15:13'!setResult: MaFailedCommitResult	result := MaFailedCommitResult! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MagmaCommitError class	instanceVariableNames: ''!!MagmaCommitError class methodsFor: 'create' stamp: 'cmm 1/17/2014 15:13'!result: aMaCommitResult 	^ self new		setResult: aMaCommitResult ;		yourself! !MagmaCommitError subclass: #MagmaCommitConflictError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!!MagmaCommitConflictError methodsFor: 'private' stamp: 'cmm 10/20/2014 18:07'!handleOrPassUsing: aMagmaSession 	"We can handle a conflict on the repository-Definitions Set of 'symbols', simply add-in the ones again and retry."	| conflictingObjects |	(result commitConflicts size = 1 and:		[ (conflictingObjects := result commitConflicts first conflictingObjects) size = 1 and: [ conflictingObjects first key == aMagmaSession definition symbols ] ])		ifTrue:			[ conflictingObjects first key addAll: conflictingObjects first value.			 aMagmaSession begin.			self retry ]		ifFalse: [ self pass ]! !!MagmaCommitConflictError methodsFor: 'actions' stamp: 'cmm 10/14/2013 20:32'!mergeAndRetry	| stillInConflict |	stillInConflict := self mergeConflicts.	stillInConflict		ifEmpty: [ self retry ]		ifNotEmpty: [ self pass ]! !!MagmaCommitConflictError methodsFor: 'actions' stamp: 'cmm 10/14/2013 20:32'!mergeConflicts	^ result mergeConflicts! !MaCorruptionError subclass: #MagmaCorruptionError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!MaClientServerEnvironmentError subclass: #MagmaEnvironmentError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!MagmaEnvironmentError subclass: #MagmaDifferentBranch	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!!MagmaDifferentBranch commentStamp: 'cmm 10/24/2008 17:38' prior: 0!A MagmaDifferentBranch is used to indicate when a commit-record from one repository is attempted to be applied to a version of the same repository that has branched in a different direction at some point.  Normally this should not happen, but if you attempt to restore to a repository that was made by backing up another repository, but other commits have been applied to that repository since, there is no way Magma can reconcile the object models, so it signals this error to inconsistencies to the model.!MagmaEnvironmentError subclass: #MagmaGarbageCollectedObject	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!MagmaCommitError subclass: #MagmaNoTransactionError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!!MagmaNoTransactionError commentStamp: 'cmm 11/15/2008 14:23' prior: 0!Signaled when a client tries to commit when they do not have a transaction.!MagmaEnvironmentError subclass: #MagmaReadServerTooFarBehind	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!!MagmaReadServerTooFarBehind commentStamp: 'cmm 3/8/2009 15:06' prior: 0!A MagmaReadServerTooFarBehind is signaled only when a higly-available, multi-server Magma node is running.  In this configuration, it is possible for the read-only servers to fall slightly behind the primary server (the one accepting commits).Applications which cannot tolerate this may set the #requiredProgress of their MagmaSession to a known commitNumber.  All ReadRequests will include this commitNumber, and, if a secondary read-only server finds itself behind that commitNumber for a particular client read-request, the client will pause 1 second and retry once before passing the error to the application.This will hopefully be sufficient to eliminate 100% of these kinds of errors.!MaError subclass: #MagmaRepairFailure	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!MaEnvironmentError subclass: #MagmaSessionLost	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!MaSoftwareError subclass: #MagmaSoftwareError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!MagmaSoftwareError subclass: #MagmaAlreadyInTransaction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!MagmaSoftwareError subclass: #MagmaInvalidReference	instanceVariableNames: 'referencingBuffer oidOfMissingBuffer'	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!!MagmaInvalidReference methodsFor: 'accessing' stamp: 'cmm 5/5/2013 19:05'!oidOfMissingBuffer	^ oidOfMissingBuffer! !!MagmaInvalidReference methodsFor: 'accessing' stamp: 'cmm 5/5/2013 19:05'!referencingBuffer	^ referencingBuffer! !!MagmaInvalidReference methodsFor: 'printing' stamp: 'cmm 7/4/2013 22:44'!printDetailsOn: aStream	super printDetailsOn: aStream.	aStream		maPrintAttributes: #(#oidOfMissingBuffer #referencingBuffer )		on: aStream! !!MagmaInvalidReference methodsFor: 'initialize-release' stamp: 'cmm 5/5/2013 19:06'!setReferencingBuffer: aMaObjectBuffer oidOfMissingBuffer: anInteger 	referencingBuffer := aMaObjectBuffer.	oidOfMissingBuffer := anInteger! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MagmaInvalidReference class	instanceVariableNames: ''!!MagmaInvalidReference class methodsFor: 'create' stamp: 'cmm 5/5/2013 19:06'!referencingBuffer: aMaObjectBuffer oidOfMissingBuffer: anInteger 	^ self new		setReferencingBuffer: aMaObjectBuffer		oidOfMissingBuffer: anInteger! !!MagmaInvalidReference class methodsFor: 'signaling' stamp: 'cmm 5/6/2013 12:24'!referencingBuffer: aMaObjectBuffer oidOfMissingBuffer: anInteger signal: aString 	^ ((self messageText: aString)		setReferencingBuffer: aMaObjectBuffer		oidOfMissingBuffer: anInteger) signal! !!MagmaInvalidReference class methodsFor: 'signaling' stamp: 'cmm 5/6/2013 12:21'!signalReferencingBuffer: aMaObjectBuffer oidOfMissingBuffer: anInteger signal: aString 	^ ((self messageText: aString)		setReferencingBuffer: aMaObjectBuffer		oidOfMissingBuffer: anInteger) signal! !MagmaCommitError subclass: #MagmaStatOverflowCommitError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!MagmaCommitConflictError subclass: #MagmaTooFarBehindConflict	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!!MagmaTooFarBehindConflict methodsFor: 'private' stamp: 'cmm 10/20/2014 12:41'!handleOrPassUsing: aMagmaSession	self pass! !MagmaEnvironmentError subclass: #MagmaTooFarBehindError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!!MagmaTooFarBehindError methodsFor: 'as yet unclassified' stamp: 'cmm 8/7/2014 16:23'!defaultAction	super defaultAction.	^ self resume: true! !!MagmaTooFarBehindError methodsFor: 'as yet unclassified' stamp: 'cmm 7/17/2014 15:31'!isResumable	^ true! !MagmaEnvironmentError subclass: #MagmaUnavailableCommitRecord	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!!MagmaUnavailableCommitRecord commentStamp: 'cmm 8/12/2008 21:23' prior: 0!A MagmaUnavailableCommitRecord indicates the specified commit record is not available on the server.!MagmaEnvironmentError subclass: #MagmaUnconnectableSessionError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!MaUserError subclass: #MagmaUserError	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!MagmaUserError subclass: #MagmaDuplicateObjectInCollection	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!!MagmaDuplicateObjectInCollection commentStamp: '<historical>' prior: 0!Signalled by MagmaSet if a duplicate object is added to the collection.!MagmaUserError subclass: #MagmaEquivalentObjectNotInCollection	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!MagmaUserError subclass: #MagmaInvalidIndexObject	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!MagmaUserError subclass: #MagmaInvalidOid	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!!MagmaInvalidOid commentStamp: 'cmm 3/1/2005 17:34' prior: 0!Signaled when the server is asked for an object at a particular oid but no object is present at that oid.!MaWarning subclass: #MagmaWarning	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!MagmaWarning subclass: #MagmaTruncationWarning	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!MagmaUnconnectableSessionError subclass: #MagmaWrongCommitNumber	instanceVariableNames: 'expectedCommitNumber'	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!!MagmaWrongCommitNumber methodsFor: 'accessing' stamp: 'cmm 10/14/2008 18:19'!expectedCommitNumber	^expectedCommitNumber! !!MagmaWrongCommitNumber methodsFor: 'accessing' stamp: 'cmm 10/14/2008 18:19'!expectedCommitNumber: anInteger	expectedCommitNumber := anInteger! !MagmaEnvironmentError subclass: #MagmaWrongServerError	instanceVariableNames: 'correctServer'	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Exceptions'!!MagmaWrongServerError commentStamp: 'cmm 11/17/2008 14:33' prior: 0!A MagmaWrongServerError is signaled when a client asks a request fails it nodeCheck.  It occurs when a warm-backup is asked to commit.  If the server determines the primary is still up and running, and that the client should have asked that server to perform the commit, it will signal this error back to the client.!!MagmaWrongServerError methodsFor: 'accessing' stamp: 'cmm 11/4/2008 17:00'!correctServer	^correctServer! !!MagmaWrongServerError methodsFor: 'accessing' stamp: 'cmm 11/4/2008 17:00'!correctServer: aMagmaRemoteLocation	correctServer := aMagmaRemoteLocation! !