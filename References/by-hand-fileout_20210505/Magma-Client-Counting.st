MaObject subclass: #MagmaCounter	instanceVariableNames: 'shared delta'	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Counting'!!MagmaCounter commentStamp: 'cmm 8/3/2011 20:30' prior: 0!A MagmaCounter provides a concurrent counter.  New instances start at a #value of 0, after which any number of sesions may simultaneously increment or decrement, but no one can set its value.Currently, MagmaCounters only support from SmallInteger minVal to: SmallInteger maxVal.!!MagmaCounter methodsFor: 'accessing' stamp: 'cmm 7/20/2007 10:37'!decrement	self decrement: 1! !!MagmaCounter methodsFor: 'accessing' stamp: 'cmm 7/20/2007 10:37'!decrement: anInteger 	"Decrement my value by anInteger."	self increment: anInteger negated! !!MagmaCounter methodsFor: 'accessing' stamp: 'cmm 1/9/2014 14:19'!delta	"The local portion of this counters value, not yet committed to the repository."	^ delta! !!MagmaCounter methodsFor: 'accessing' stamp: 'cmm 7/20/2007 10:37'!increment	self increment: 1! !!MagmaCounter methodsFor: 'accessing' stamp: 'cmm 7/20/2007 10:37'!increment: anInteger	"Increment my value by anInteger."	delta := delta + anInteger! !!MagmaCounter methodsFor: 'accessing' stamp: 'cmm 1/9/2014 14:19'!shared	"The last-known persistent value of this Counter."	^ shared! !!MagmaCounter methodsFor: 'accessing' stamp: 'cmm 7/20/2007 10:28'!value	^ shared + delta! !!MagmaCounter methodsFor: 'initialize' stamp: 'cmm 7/20/2007 10:29'!initialize	super initialize.	delta := shared := 0! !MaStat subclass: #MagmaStat	instanceVariableNames: 'deltaCount deltaSum'	classVariableNames: ''	poolDictionaries: ''	category: 'Magma-Client-Counting'!!MagmaStat methodsFor: 'accessing' stamp: 'cmm 12/13/2016 20:44'!addValue: aMagnitude 	super addValue: aMagnitude.	last := last asFloat.	"Check for overflow.  Magma pulls the numbers straight from my Buffer and performs the arithmetic as a pre-write adjustment on the server, therefore I cannot support beyond the range of immediate Integers (e.g., SmallInteger range)."	(deltaCount + count) > 1073741823 ifTrue: [ MaOverflowError signal ]! !!MagmaStat methodsFor: 'accessing' stamp: 'cmm 1/3/2014 09:53'!count	^ super count + deltaCount! !!MagmaStat methodsFor: 'accessing' stamp: 'cmm 1/9/2014 16:14'!deltaCount	"The number of values which have not yet been committed to my repository."	^ deltaCount! !!MagmaStat methodsFor: 'accessing' stamp: 'cmm 1/9/2014 13:30'!deltaSum	"The portion of my #sum which is not yet committed to my repository."	^ deltaSum! !!MagmaStat methodsFor: 'accessing' stamp: 'cmm 7/29/2015 17:11'!max	^ max = Float negativeInfinity ifFalse: [ max ]! !!MagmaStat methodsFor: 'accessing' stamp: 'cmm 4/28/2014 19:36'!min	^ min = Float infinity ifFalse: [ min ]! !!MagmaStat methodsFor: 'accessing' stamp: 'cmm 1/3/2014 09:53'!sum	^ super sum + deltaSum! !!MagmaStat methodsFor: 'private' stamp: 'cmm 1/3/2014 13:54'!adjustCount: anInteger sum: aFloat 	"Don't call super, we want to add to the delta's instead of count and sum."	deltaSum := deltaSum + aFloat.	deltaCount := deltaCount + anInteger! !!MagmaStat methodsFor: 'private' stamp: 'cmm 1/3/2014 13:55'!adjustValues: aFloat 	"Don't call super, we want to add to the delta's instead of count and sum."	self		adjustCount: 1		sum: aFloat! !!MagmaStat methodsFor: 'private' stamp: 'cmm 1/10/2014 14:18'!captureLocalValues	deltaCount isZero ifFalse:		[ self						attributeNamed: #deltaCountBeforeRefresh			put: deltaCount ;						attributeNamed: #deltaSumBeforeRefresh			put: deltaSum ]! !!MagmaStat methodsFor: 'private' stamp: 'cmm 1/16/2014 14:09'!postRefreshUsing: aMaObjectBuffer for: aMagmaSession 	"Filter MagmaStat's from being removed from the commitPackage when using WriteBarrier."	aMagmaSession allowWriteBarrier ifFalse:		[ super			postRefreshUsing: aMaObjectBuffer			for: aMagmaSession ]! !!MagmaStat methodsFor: 'private' stamp: 'cmm 11/10/2014 10:30'!refreshFrom: aMaObjectBuffer using: aMagmaSession includingLocal: aBoolean 	"An important implementation awareness:  Remember that aMaObjectBuffer may already include its #prewriteAdjustmentTo:from:, or it may not.  CommitLogRecords are written PRIOR to the adjustment, whereas buffers in the DB are written AFTER the adjustment.  The adjustment itself is simply the transfer of the delta-values to the shared-values, and zero'ing out the deltas.	This method doesn't know where aMaObjectBuffer came from, so doing the same 'adjustment' right here is the correct behavior."	| sharedMin sharedMax |	"Update my 'attributes', 'count' and 'sum'."	1		to: 3		do:			[ : instVarIndex | self				slotAt: instVarIndex				put: (aMagmaSession serializer objectWithOid: (aMaObjectBuffer maInstVarAt: instVarIndex)) ].	"Now add-in the deltas from the buffer."	count := count + (MaOidCalculator integerFromOid: (aMaObjectBuffer maInstVarAt: 7)).	sum := sum + (MaOidCalculator floatFromOid: (aMaObjectBuffer maInstVarAt: 8)).	sharedMin := MaOidCalculator floatFromOid: (aMaObjectBuffer maInstVarAt: 4).	min := aBoolean		ifTrue: [ sharedMin ]		ifFalse: [ min min: sharedMin ].	sharedMax := MaOidCalculator floatFromOid: (aMaObjectBuffer maInstVarAt: 5).	max := aBoolean		ifTrue: [ sharedMax ]		ifFalse: [ max max: sharedMax ].	aBoolean ifTrue:		[ last := MaOidCalculator floatFromOid: (aMaObjectBuffer maInstVarAt: 6).		deltaCount := 0.		deltaSum := 0.0 ]! !!MagmaStat methodsFor: 'private' stamp: 'cmm 1/10/2014 14:16'!restoreLocalValues: aBoolean	! !!MagmaStat methodsFor: 'initialize-release' stamp: 'cmm 1/20/2014 13:57'!initialize	super initialize.	deltaSum := Float zero.	deltaCount := Integer zero.	min := Float infinity.	max := Float infinity negated! !!MagmaStat methodsFor: '*magma-tester' stamp: 'cmm 1/4/2014 15:01'!equals: aMaStat 	aMaStat maOriginalClass = self maOriginalClass.	^ #(#sum #count #min #max #last ) allSatisfy:		[ : each | (self perform: each) = (aMaStat perform: each) ]! !