Object subclass: #MaDictionaryBencher	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Ma-Collections-Dictionarys-Auto-Tests'!!MaDictionaryBencher methodsFor: 'as yet unclassified' stamp: 'Igor.Stasenko 9/24/2010 18:51'!benchAt: aDictClass size: aCollectionSize	| coll dict time shuffled |		coll := self createCollectionOfSize: aCollectionSize.	dict := aDictClass new.	coll do: [:each | dict at: each put: each ].		time := OrderedCollection new.	10 timesRepeat: [		shuffled := coll shuffled.		Smalltalk garbageCollect.		time add: [ 			shuffled do: [:each | dict at: each] ] timeToRun	].	^ time average asFloat	! !!MaDictionaryBencher methodsFor: 'as yet unclassified' stamp: 'Igor.Stasenko 9/24/2010 18:58'!benchAtIfAbsent: aDictClass size: aCollectionSize	" in this benchmark, we making a half of keys present,	while another half absent. 	so, an absent block will be evaluated 50% of time"		| coll coll2 dict time shuffled count |	coll := self createCollectionOfSize: aCollectionSize.	coll2 := (coll first: (aCollectionSize // 2)) asOrderedCollection addAll: (self createCollectionOfSize: aCollectionSize //2 ).		time := OrderedCollection new.	10 timesRepeat: [		count := 0. 		dict := aDictClass new.		shuffled := coll2 shuffled.		Smalltalk garbageCollect.		coll do: [:e | dict at: e put: e].		time add: [ shuffled do: [:each | dict at: each ifAbsent: [ count := count +1 ] ] ] timeToRun	].			^ time average asFloat! !!MaDictionaryBencher methodsFor: 'as yet unclassified' stamp: 'Igor.Stasenko 9/24/2010 18:46'!benchAtIfAbsentPut2: aDictClass size: aCollectionSize	" in this benchmark, we making a half of elements existing,	while another half not,	so, ifAbsentPut evaluating a block 50% of time"		| coll coll2 dict time shuffled |	coll := self createCollectionOfSize: aCollectionSize.	coll2 := (coll first: (aCollectionSize // 2)) asOrderedCollection addAll: (self createCollectionOfSize: aCollectionSize //2 ).		time := OrderedCollection new.	10 timesRepeat: [		dict := aDictClass new.		shuffled := coll2 shuffled.		Smalltalk garbageCollect.		coll do: [:e | dict at: e put: e].		time add: [ shuffled do: [:each | dict at: each ifAbsentPut: [ each ] ] ] timeToRun	].			^ time average asFloat! !!MaDictionaryBencher methodsFor: 'as yet unclassified' stamp: 'Igor.Stasenko 9/24/2010 18:38'!benchAtIfAbsentPut: aDictClass size: aCollectionSize	| coll dict time shuffled |	coll := self createCollectionOfSize: aCollectionSize.	time := OrderedCollection new.	10 timesRepeat: [		dict := aDictClass new.		shuffled := coll shuffled.		Smalltalk garbageCollect.		time add: [ shuffled do: [:each | dict at: each ifAbsentPut: [ each ] ] ] timeToRun	].			^ time average asFloat! !!MaDictionaryBencher methodsFor: 'as yet unclassified' stamp: 'Igor.Stasenko 9/24/2010 18:49'!benchAtPut: aDictClass size: aCollectionSize	| coll dict time shuffled |	coll := self createCollectionOfSize: aCollectionSize.	time := OrderedCollection new.	10 timesRepeat: [		dict := aDictClass new.		shuffled := coll shuffled.		Smalltalk garbageCollect.		time add: [ shuffled do: [:each | dict at: each put: each ] ] timeToRun	].			^ time average asFloat! !!MaDictionaryBencher methodsFor: 'as yet unclassified' stamp: 'Igor.Stasenko 9/24/2010 18:04'!createCollectionOfSize: aSize		^ ((1 to: aSize) collect: [:e | Object new ]) ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MaDictionaryBencher class	instanceVariableNames: ''!!MaDictionaryBencher class methodsFor: 'as yet unclassified' stamp: 'Igor.Stasenko 9/24/2010 19:08'!benchAllOperations: collectionSize	^ #( At AtIfAbsent AtIfAbsentPut AtPut AtIfAbsentPut2 ) collect: [:op |				op -> (self benchKnownClasses: op size: collectionSize)		]! !!MaDictionaryBencher class methodsFor: 'as yet unclassified' stamp: 'Igor.Stasenko 9/24/2010 19:08'!benchKnownClasses: operation size: collectionSize	| sel |		sel := ('bench' , operation, ':size:') asSymbol.		^ self knownClasses collect: [:cls |			cls name -> (self new perform: sel withArguments: { cls. collectionSize })		]! !!MaDictionaryBencher class methodsFor: 'as yet unclassified' stamp: 'Igor.Stasenko 9/24/2010 19:02'!knownClasses^ { Dictionary. WeakKeyDictionary. WeakIdentityKeyDictionary. WeakValueDictionary. MaDictionary. MaWeakKeyDictionary. MaWeakIdentityKeyDictionary. MaWeakValueDictionary. MaAutoWeakKeyDictionary. MaAutoWeakIdentityKeyDictionary. MaAutoWeakValueDictionary. MaAutoIdentityKeyWeakValueDictionary } ! !MaDictionarysTests subclass: #MaIdentityKeyWeakValueDictionaryTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Ma-Collections-Dictionarys-Auto-Tests'!!MaIdentityKeyWeakValueDictionaryTest methodsFor: 'as yet unclassified' stamp: 'cmm 3/19/2013 15:58'!newDict	^ MaWeakIdentityKeyDictionary new! !MaDictionarysTests subclass: #MaWeakIdentityKeyDictionaryTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Ma-Collections-Dictionarys-Auto-Tests'!!MaWeakIdentityKeyDictionaryTest methodsFor: 'as yet unclassified' stamp: 'Igor.Stasenko 11/8/2010 00:38'!expectedFailures	"identity key dictionary behaves differently, so, testIncludesKey is non fit"	^ #( testIncludesKey)! !!MaWeakIdentityKeyDictionaryTest methodsFor: 'as yet unclassified' stamp: 'cmm 3/19/2013 16:13'!newDict	^ MaWeakIdentityKeyDictionary new! !!MaWeakIdentityKeyDictionaryTest methodsFor: 'as yet unclassified' stamp: 'cmm 3/19/2013 16:13'!weakIdentityKeyClass	^ MaWeakIdentityKeyDictionary! !!MaWeakIdentityKeyDictionaryTest methodsFor: 'as yet unclassified' stamp: 'cmm 3/19/2013 16:00'!weakKeyClass	^ MaWeakKeyDictionary! !MaDictionarysTests subclass: #MaWeakKeyDictionaryTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Ma-Collections-Dictionarys-Auto-Tests'!!MaWeakKeyDictionaryTest methodsFor: 'as yet unclassified' stamp: 'cmm 3/19/2013 16:06'!newDict	^ MaWeakKeyDictionary new! !MaDictionarysTests subclass: #MaWeakValueDictionaryTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Ma-Collections-Dictionarys-Auto-Tests'!!MaWeakValueDictionaryTest methodsFor: 'as yet unclassified' stamp: 'cmm 3/19/2013 16:13'!newDict	^ MaWeakValueDictionary new! !