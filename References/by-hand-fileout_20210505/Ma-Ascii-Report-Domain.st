MaObject subclass: #MaFixedWidthReport	instanceVariableNames: 'rowSpecifications subReports numberOfIndents defaultIndentSize'	classVariableNames: ''	poolDictionaries: ''	category: 'Ma-Ascii-Report-Domain'!!MaFixedWidthReport methodsFor: 'accessing' stamp: 'cmm 5/3/2008 12:28'!defaultIndentSize	^ defaultIndentSize! !!MaFixedWidthReport methodsFor: 'accessing' stamp: 'cmm 5/3/2008 12:28'!defaultIndentSize: anInteger 	defaultIndentSize := anInteger! !!MaFixedWidthReport methodsFor: 'accessing' stamp: 'cmm 5/9/2008 11:14'!for: aClass subReportOn: oneArgBlock 	"Causes the receiver to use oneArgBlock to retrieve a collection that will be reported on for each instance of aClass the report encounters."	(subReports 		at: aClass		ifAbsentPut: [ OrderedCollection new ])		add: oneArgBlock ;		yourself! !!MaFixedWidthReport methodsFor: 'accessing' stamp: 'cmm 5/4/2008 22:41'!for: aClass use: aMaFixedWidthRowSpecification 	rowSpecifications 		at: aClass		put: aMaFixedWidthRowSpecification! !!MaFixedWidthReport methodsFor: 'accessing' stamp: 'cmm 5/3/2008 12:32'!rowSpecifications	^ rowSpecifications! !!MaFixedWidthReport methodsFor: 'accessing' stamp: 'cmm 7/13/2009 17:59'!write: aCollection to: aStream 	| prevClass |	aCollection do: 		[ : each | 		each maOriginalClass = prevClass ifFalse: 			[ self 				writeHeadingsFor: each				to: aStream.			prevClass := each maOriginalClass ].		self 			writeBasicAttributesOf: each			to: aStream.		self 			writeSubReportsOf: each			to: aStream ]! !!MaFixedWidthReport methodsFor: 'private' stamp: 'cmm 5/3/2008 12:31'!defaultRowSpecificationFor: anObject 	self error: 'This feature is not yet implemented.  It creates a default row specification for an object based on its public attributes.'! !!MaFixedWidthReport methodsFor: 'private' stamp: 'cmm 5/3/2008 12:31'!indent	self numberOfIndents: self numberOfIndents + 1! !!MaFixedWidthReport methodsFor: 'private' stamp: 'cmm 5/4/2008 22:46'!indentInto: aStream 	self numberOfIndents * self defaultIndentSize timesRepeat: [ aStream space ]! !!MaFixedWidthReport methodsFor: 'private' stamp: 'cmm 3/27/2013 21:28'!initialize	rowSpecifications := Dictionary new.	subReports := Dictionary new.	self defaultIndentSize: 4.	self numberOfIndents: 0! !!MaFixedWidthReport methodsFor: 'private' stamp: 'cmm 5/3/2008 12:28'!numberOfIndents	^ numberOfIndents! !!MaFixedWidthReport methodsFor: 'private' stamp: 'cmm 5/3/2008 12:28'!numberOfIndents: anInteger 	numberOfIndents := anInteger! !!MaFixedWidthReport methodsFor: 'private' stamp: 'cmm 5/3/2008 12:31'!outdent	self numberOfIndents: self numberOfIndents - 1! !!MaFixedWidthReport methodsFor: 'private' stamp: 'cmm 7/13/2009 17:59'!rowSpecificationFor: anObject 	^ rowSpecifications 		at: anObject maOriginalClass		ifAbsentPut: [ self defaultRowSpecificationFor: anObject ]! !!MaFixedWidthReport methodsFor: 'private' stamp: 'cmm 7/13/2009 17:59'!subreportCollectionsFor: anObject 	^ (subReports 		at: anObject maOriginalClass		ifAbsentPut: [ OrderedCollection new ]) collect: [ : each | each value: anObject ]! !!MaFixedWidthReport methodsFor: 'private' stamp: 'cmm 5/3/2008 12:32'!writeBasicAttributesOf: anObject to: aStream 	self indentInto: aStream.	(self rowSpecificationFor: anObject) 		write: anObject		to: aStream.	(self rowSpecificationFor: anObject) spacing timesRepeat: [ aStream cr ]! !!MaFixedWidthReport methodsFor: 'private' stamp: 'cmm 5/9/2008 13:56'!writeHeadingsFor: aClass to: aWriteStream 	| rowSpec |	rowSpec := self rowSpecificationFor: aClass.	rowSpec hasHeadings ifFalse: [ ^ self ].	aWriteStream cr.	self indentInto: aWriteStream.	rowSpec writeHeadingsTo: aWriteStream.	rowSpec hasUnderlinedHeadings ifTrue: 		[ aWriteStream cr.		self indentInto: aWriteStream.		rowSpec writeHeadingUnderlinesTo: aWriteStream ].	aWriteStream cr! !!MaFixedWidthReport methodsFor: 'private' stamp: 'cmm 5/3/2008 12:30'!writeSubReportsOf: anObject to: aStream 	| subReportCollections |	self indent.	(subReportCollections := self subreportCollectionsFor: anObject) do: 		[ : eachCollection | 		self 			write: eachCollection			to: aStream ].	self outdent.	subReportCollections notEmpty ifTrue: [ aStream cr ]! !MaObject subclass: #MaFixedWidthReportColumn	instanceVariableNames: 'headingText headingUnderlineCharacter width dataAccessBlock justification leftMarginSize useEllipsisOnTruncate repeat previousValue'	classVariableNames: ''	poolDictionaries: ''	category: 'Ma-Ascii-Report-Domain'!!MaFixedWidthReportColumn methodsFor: 'building' stamp: 'cmm 5/3/2008 12:36'!alignCenter	justification := #center! !!MaFixedWidthReportColumn methodsFor: 'building' stamp: 'cmm 5/3/2008 12:36'!alignLeft	justification := #left! !!MaFixedWidthReportColumn methodsFor: 'building' stamp: 'cmm 5/3/2008 12:36'!alignRight	justification := #right! !!MaFixedWidthReportColumn methodsFor: 'building' stamp: 'cmm 5/3/2008 12:37'!headingText: aString 	headingText := aString! !!MaFixedWidthReportColumn methodsFor: 'building' stamp: 'cmm 5/3/2008 12:37'!headingUnderlineCharacter: aCharacter 	headingUnderlineCharacter := aCharacter! !!MaFixedWidthReportColumn methodsFor: 'building' stamp: 'cmm 5/3/2008 12:37'!leftMarginSize: anInteger 	leftMarginSize := anInteger! !!MaFixedWidthReportColumn methodsFor: 'building' stamp: 'cmm 5/3/2008 12:37'!repeatDuplicateValues: aBoolean 	"Set whether the same value should repeat from the previous value.	i.e.,		Company			Name				vs.		Company			Name		ISCC			Chris Mulle					ISCC			Chris Muller						John Doe					ISCC			John Doe"	repeat := aBoolean! !!MaFixedWidthReportColumn methodsFor: 'building' stamp: 'cmm 5/3/2008 12:37'!useEllipsisOnTruncate: aBoolean 	useEllipsisOnTruncate := aBoolean! !!MaFixedWidthReportColumn methodsFor: 'building' stamp: 'cmm 5/3/2008 12:37'!value: anObject 	| value |	^ (value := self rawValue: anObject) isString 		ifTrue: [ self formattedValue: value ]		ifFalse: [ self formattedValue: value printString ]! !!MaFixedWidthReportColumn methodsFor: 'building' stamp: 'cmm 5/3/2008 12:37'!width: anInteger 	width := anInteger! !!MaFixedWidthReportColumn methodsFor: 'private' stamp: 'cmm 5/3/2008 12:40'!dataAccessBlock	^ dataAccessBlock! !!MaFixedWidthReportColumn methodsFor: 'private' stamp: 'cmm 5/3/2008 12:40'!dataAccessBlock: aBlock 	dataAccessBlock := aBlock! !!MaFixedWidthReportColumn methodsFor: 'private' stamp: 'cmm 5/4/2008 22:59'!formattedValue: aString 	| cell startPosition |	cell := (String new: self width + self leftMarginSize) atAllPut: Character space.	(repeat = false and: [ previousValue = aString ]) ifTrue: [ ^ cell ].	previousValue := aString.	aString size >= self width ifTrue: 		[ | truncatedValue |		truncatedValue := aString 			copyFrom: 1			to: self width.		self useEllipsisOnTruncate ifTrue: 			[ truncatedValue 				replaceFrom: self width - 2				to: self width				with: '...'				startingAt: 1 ].		^ cell 			replaceFrom: self leftMarginSize + 1			to: cell size			with: truncatedValue			startingAt: 1 ].	startPosition := (self startingPositionFor: aString) + self leftMarginSize.	^ cell 		replaceFrom: startPosition		to: startPosition + aString size - 1		with: aString		startingAt: 1! !!MaFixedWidthReportColumn methodsFor: 'private' stamp: 'cmm 5/3/2008 12:40'!headingText	^ headingText! !!MaFixedWidthReportColumn methodsFor: 'private' stamp: 'cmm 5/3/2008 12:40'!headingUnderlineCharacter	^ headingUnderlineCharacter! !!MaFixedWidthReportColumn methodsFor: 'private' stamp: 'cmm 5/4/2008 23:01'!headingUnderlineValue	| headingChar underlineString |	headingChar := self headingUnderlineCharacter isNil 		ifTrue: [ Character space ]		ifFalse: [ self headingUnderlineCharacter ].	underlineString := (String new: (self headingText size min: self width)) atAllPut: headingChar.	^ self formattedValue: underlineString! !!MaFixedWidthReportColumn methodsFor: 'private' stamp: 'cmm 5/3/2008 12:40'!justification	^ justification! !!MaFixedWidthReportColumn methodsFor: 'private' stamp: 'cmm 5/3/2008 12:41'!leftMargin	^ (String new: self leftMarginSize) atAllPut: Character space! !!MaFixedWidthReportColumn methodsFor: 'private' stamp: 'cmm 5/3/2008 12:41'!rawValue: anObject 	^ self dataAccessBlock value: anObject! !!MaFixedWidthReportColumn methodsFor: 'private' stamp: 'cmm 5/4/2008 23:02'!startingPositionFor: aString 	self isLeftAligned ifTrue: [ ^ 1 ].	self isRightAligned ifTrue: [ ^ self width - aString size + 1 ].	^ self width - (aString size // 2)! !!MaFixedWidthReportColumn methodsFor: 'testing' stamp: 'cmm 5/9/2008 13:38'!hasHeading	^ headingText notNil! !!MaFixedWidthReportColumn methodsFor: 'testing' stamp: 'cmm 5/3/2008 12:39'!hasUnderlinedHeading	^ self headingUnderlineCharacter notNil! !!MaFixedWidthReportColumn methodsFor: 'testing' stamp: 'cmm 5/4/2008 23:03'!isCenterAligned	^ self justification = #center! !!MaFixedWidthReportColumn methodsFor: 'testing' stamp: 'cmm 5/3/2008 12:39'!isLeftAligned	^ self justification = #left! !!MaFixedWidthReportColumn methodsFor: 'testing' stamp: 'cmm 5/3/2008 12:39'!isRightAligned	^ self justification = #right! !!MaFixedWidthReportColumn methodsFor: 'accessing' stamp: 'cmm 5/3/2008 12:34'!headingValue	^ self formattedValue: self headingText! !!MaFixedWidthReportColumn methodsFor: 'accessing' stamp: 'cmm 5/3/2008 12:34'!leftMarginSize	^ leftMarginSize! !!MaFixedWidthReportColumn methodsFor: 'accessing' stamp: 'cmm 5/3/2008 12:34'!useEllipsisOnTruncate	"This only applies when shouldWrap is false."	useEllipsisOnTruncate isNil ifTrue: [ self useEllipsisOnTruncate: true ].	^ useEllipsisOnTruncate! !!MaFixedWidthReportColumn methodsFor: 'accessing' stamp: 'cmm 5/3/2008 12:36'!width	width isNil ifTrue: [ ^ 20 ].  "Twenty seems a good balance for numbers and text."	^ width! !!MaFixedWidthReportColumn methodsFor: 'initialize-release' stamp: 'cmm 5/9/2008 13:35'!initialize	super initialize.	self		alignLeft ;		headingUnderlineCharacter: $- ;		leftMarginSize: 2 ;		useEllipsisOnTruncate: false ;		width: 10 ;		repeatDuplicateValues: false! !!MaFixedWidthReportColumn methodsFor: 'printing' stamp: 'cmm 5/9/2008 13:51'!printOn: aStream 	super printOn: aStream.	self hasHeading ifTrue: 		[ aStream			nextPutAll: ' (' ;			nextPutAll: self headingText ;			nextPut: $) ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MaFixedWidthReportColumn class	instanceVariableNames: ''!!MaFixedWidthReportColumn class methodsFor: 'instance creation' stamp: 'cmm 5/9/2008 11:48'!dataAccessBlock: aOneArgBlock 	"Given any object you want to report on, provide aBlock of code 	that will extract the value from the object that you want in this column."	^ self new dataAccessBlock: aOneArgBlock! !!MaFixedWidthReportColumn class methodsFor: 'instance creation' stamp: 'cmm 5/3/2008 12:42'!selector: aSymbol 	^ self dataAccessBlock: [ : object | object perform: aSymbol ]! !MaObject subclass: #MaFixedWidthRowSpecification	instanceVariableNames: 'columns spacing'	classVariableNames: ''	poolDictionaries: ''	category: 'Ma-Ascii-Report-Domain'!!MaFixedWidthRowSpecification methodsFor: 'building' stamp: 'cmm 5/3/2008 12:44'!addColumn: aMaFixedWidthReportColumn 	columns add: aMaFixedWidthReportColumn! !!MaFixedWidthRowSpecification methodsFor: 'building' stamp: 'cmm 5/3/2008 12:44'!spacing: anInteger 	spacing := anInteger! !!MaFixedWidthRowSpecification methodsFor: 'private' stamp: 'cmm 5/3/2008 12:45'!columnValuesFor: anObject 	^ self columns collect: [ : eachColumn | eachColumn rawValue: anObject ]! !!MaFixedWidthRowSpecification methodsFor: 'private' stamp: 'cmm 5/3/2008 12:45'!write: anObject to: aWriteStream 	self columns do: [ : eachColumn | aWriteStream nextPutAll: (eachColumn value: anObject) ]! !!MaFixedWidthRowSpecification methodsFor: 'private' stamp: 'cmm 5/9/2008 13:57'!writeHeadingUnderlinesTo: aWriteStream 	self columns do: 		[ : each | 		(each hasHeading and: [ each hasUnderlinedHeading ]) ifTrue: [ aWriteStream nextPutAll: each headingUnderlineValue ] ]! !!MaFixedWidthRowSpecification methodsFor: 'private' stamp: 'cmm 5/9/2008 13:55'!writeHeadingsTo: aWriteStream 	self columns do: [ : each | each hasHeading ifTrue: [ aWriteStream nextPutAll: each headingValue ] ]! !!MaFixedWidthRowSpecification methodsFor: 'accessing' stamp: 'cmm 5/3/2008 12:45'!columns	^ columns! !!MaFixedWidthRowSpecification methodsFor: 'accessing' stamp: 'cmm 5/4/2008 22:57'!spacing	^ spacing! !!MaFixedWidthRowSpecification methodsFor: 'testing' stamp: 'cmm 5/9/2008 13:38'!hasHeadings	^ self columns anySatisfy: [ : each | each hasHeading ]! !!MaFixedWidthRowSpecification methodsFor: 'testing' stamp: 'cmm 5/9/2008 13:37'!hasUnderlinedHeadings	^ self columns anySatisfy: [ : each | each hasUnderlinedHeading ]! !!MaFixedWidthRowSpecification methodsFor: 'initialize-release' stamp: 'cmm 5/4/2008 22:57'!initialize	columns := OrderedCollection new.	self spacing: 1! !