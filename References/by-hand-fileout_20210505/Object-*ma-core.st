'From Squeak5.2 of 13 December 2018 [latest update: #18225] on 5 May 2021 at 9:43:58 pm'!!Object methodsFor: '*ma-core' stamp: 'cmm 12/30/2007 18:41'!copyAttributes: anArray from: sourceObject	anArray do:		[ :each |		self			instVarNamed: each asString			put: (sourceObject instVarNamed: each) copy ]! !!Object methodsFor: '*ma-core' stamp: 'cmm 10/9/2012 20:29'!differencesWith: anObject 	^ self		differencesWith: anObject		using: #=! !!Object methodsFor: '*ma-core' stamp: 'cmm 3/27/2013 21:43'!differencesWith: anObject using: comparisonOperator 	| differences c1 c2 |	differences := OrderedCollection new.	self == anObject ifTrue: [ ^ differences ].	c1 := self maOriginalClass.	c2 := anObject maOriginalClass.	c1 instSpec = c2 instSpec ifFalse:		[ differences add:			'class' ->				(Array					with: c1					with: c2) ].	(c1 isBytes and: [ self ~= anObject ]) ifTrue:		[ differences add:			'byte-content' ->				(Array					with: self					with: anObject) ].	(c1 isWords and:		[ c1 isPointers not and: [ self ~= anObject ] ]) ifTrue:		[ differences add:			'word-content' ->				(Array					with: self					with: anObject) ].	(c1 allInstVarNames intersection: c2 allInstVarNames) do:		[ : each | | my his | ((my := (self instVarNamed: each) yourself)			perform: comparisonOperator			with: (his := (anObject instVarNamed: each) yourself)) ifFalse:			[ differences add:				each ->					(Array						with: my						with: his) ] ].	(c1 allInstVarNames difference: c2 allInstVarNames) do:		[ : each | differences add:			each ->				(Array					with: (self instVarNamed: each) yourself					with: 'no inst var named ' , each) ].	(c2 allInstVarNames difference: c1 allInstVarNames) do:		[ : each | differences add:			each ->				(Array					with: 'no inst var named ' , each					with: (anObject instVarNamed: each) yourself) ].	1		to: (self basicSize max: anObject basicSize)		do:			[ : index | index > self basicSize				ifTrue:					[ differences add:						index ->							(Array								with: 'no reference at index ' , index asString								with: (anObject basicAt: index) yourself) ]				ifFalse:					[ index > anObject basicSize						ifTrue:							[ differences add:								index ->									(Array										with: (anObject basicAt: index) yourself										with: 'no reference at index ' , index asString) ]						ifFalse:							[ ((self basicAt: index) yourself								perform: comparisonOperator								with: (anObject basicAt: index) yourself) ifFalse:								[ differences add:									index ->										(Array											with: (self basicAt: index) yourself											with: (anObject basicAt: index) yourself) ] ] ] ].	^ differences! !!Object methodsFor: '*ma-core' stamp: 'cmm 10/9/2012 18:20'!identityDifferencesWith: anObject 	^ self		differencesWith: anObject		using: #==! !!Object methodsFor: '*ma-core' stamp: 'cmm 3/28/2014 09:58'!isBoolean	^ false! !!Object methodsFor: '*ma-core' stamp: 'cmm 5/15/2011 12:50'!isEmptyOrNil	^ false! !!Object methodsFor: '*ma-core' stamp: 'cmm 11/15/2009 15:24'!isInMagma	^ (self respondsTo: #magmaSession) and: [ self magmaSession notNil ]! !!Object methodsFor: '*ma-core' stamp: 'cmm 8/21/2004 15:53'!maAbbreviatedString	"This is intended to support two possible string representations for any object	instead of just one.  The normal one and this abbreivated one.  The normal one provides type-information, the abbreviation provides the identifier.  An abbreviated	provides a brevity that proves useful when looking at collections or	other 'container' type objects.	Suggested usage is to omit the objects type (e.g. class name) for printing abbreviated,	but include it for standard printOn:"	^ String streamContents: [ : stream | self maPrintAbbreviatedOn: stream ]! !!Object methodsFor: '*ma-core' stamp: 'cmm 2/15/2002 00:02'!maIsException	^false! !!Object methodsFor: '*ma-core' stamp: 'cmm 7/15/2006 15:12'!maIsSortedCollection	^ false! !!Object methodsFor: '*ma-core' stamp: 'cmm 11/10/2005 22:07'!maMarked: aString	"This is a marker method used to indicate that we wish to come back and re-examine	code in the future for possible improvement.  For now, try to keep improvements categorized	via anEsAtom that we can Browse References to, if necessary.  The possibilities should be:		'ugly'		'performance'		'bug'		'dev'		'vmSpecific'		'releaseSpecific'		'otherPackageSupport'		'system override'		'deprecated'		'magic'		'debug'	A *comment* then should follow to provide more detail."	aString = 'delete' ifTrue: [ self halt: 'Oops..  looks like you still need this method.' ]! !!Object methodsFor: '*ma-core' stamp: 'cmm 2/7/2008 16:56'!maOriginalClass	"Unfortunately, we don't have complete class-transparency with WriteBarrier.  #species isn't always the quite the thing needed.  In rare cases (browse my senders), my actual class is needed."	^ self class! !!Object methodsFor: '*ma-core' stamp: 'cm 12/29/2001 01:14'!maPrintAbbreviatedOn: aStream	"This is intended to support two possible string representations for any object	instead of just one.  The normal one and this abbreivated one.  An abbreviated	provides a brevity that proves useful when looking at collections or	other 'container' type objects.	Suggested usage is to omit the objects type (e.g. class name) for printing abbreviated,	but include it for standard printOn:"! !!Object methodsFor: '*ma-core' stamp: 'cmm 7/10/2013 13:55'!maPrintAttribute: aString on: aStream 	aString isSymbol		ifTrue:			[ self				maPrintSelector: aString				on: aStream ]		ifFalse:			[ self				maPrintInstVar: aString				on: aStream ]! !!Object methodsFor: '*ma-core'!maPrintAttributes: arrayOfSymbols on: aStream	arrayOfSymbols do:		[ :each |		self			maPrintAttribute: each			on: aStream ]! !!Object methodsFor: '*ma-core' stamp: 'cmm 1/31/2013 15:32'!maPrintDescription	^ self printString! !!Object methodsFor: '*ma-core' stamp: 'cmm 12/19/2002 23:26'!maPrintInstVar: aSymbol on: aStream	| value |	aStream		cr;		tab;		nextPutAll: aSymbol;		nextPutAll: ' = '.	value := self instVarNamed: aSymbol asString.	(value isCollection and: [ value isString not ])		ifTrue:			[ value do:				[ :each |				aStream					maPrint: each;					space ] ]		ifFalse:			[ aStream maPrint: value ]! !!Object methodsFor: '*ma-core' stamp: 'cmm 7/30/2007 00:23'!maPrintOn: aStream	self printOn: aStream! !!Object methodsFor: '*ma-core' stamp: 'cmm 7/10/2013 13:57'!maPrintSelector: aSymbol on: aStream 	| value |	aStream		 cr ;		 tab ;		 nextPutAll: aSymbol ;		 nextPutAll: ' : '.	value := [ self perform: aSymbol ]		on: Error		do: [ : exc | exc return: (exc messageText ifNil: [ 'error' ]) ].	aStream maPrint: value! !!Object methodsFor: '*ma-core' stamp: 'cmm 7/24/2002 20:46'!maShallowCopy	^self shallowCopy! !!Object methodsFor: '*ma-core' stamp: 'cmm 6/17/2010 15:28'!maSuggestedFilename	"Answer a name that would be suitable, if the receiver were to be saved in a file."	^ self name asFileName ! !!Object methodsFor: '*ma-core' stamp: 'cmm 7/9/2008 20:39'!realObject	"Balance API with MagmaForwardingProxy, so applications may sometimes choose to get hold of the actual object, not just a forwardingProxy."	^ self! !!Object methodsFor: '*ma-core' stamp: 'cmm 2/11/2016 14:12'!validateIsKindOf: aClassOrClasses ifNotSignal: userErrorClass 	(self isKindOf: aClassOrClasses) ifFalse:		[ userErrorClass signalPage:			(MauiPage streamContents:				[ : stream | stream					 maPrint: 'This message accepts a ' ;					 maPrint: aClassOrClasses asString ]) ]! !