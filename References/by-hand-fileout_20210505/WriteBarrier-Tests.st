WriteBarrier subclass: #DirtySetWriteBarrier	instanceVariableNames: 'dirty'	classVariableNames: ''	poolDictionaries: ''	category: 'WriteBarrier-Tests'!!DirtySetWriteBarrier methodsFor: 'as yet unclassified' stamp: 'avi 10/6/2004 13:58'!clearDirtySet	dirty := IdentitySet new! !!DirtySetWriteBarrier methodsFor: 'as yet unclassified' stamp: 'avi 10/6/2004 13:58'!dirtySet	^ dirty copy! !!DirtySetWriteBarrier methodsFor: 'as yet unclassified' stamp: 'avi 10/6/2004 13:58'!initialize	super initialize.	self clearDirtySet! !!DirtySetWriteBarrier methodsFor: 'as yet unclassified' stamp: 'avi 10/6/2004 13:58'!isDirty: anObject	^ dirty includes: anObject! !!DirtySetWriteBarrier methodsFor: 'as yet unclassified' stamp: 'avi 10/6/2004 13:58'!modified: anObject	dirty add: anObject! !Object subclass: #WBMock	instanceVariableNames: 'x y'	classVariableNames: ''	poolDictionaries: ''	category: 'WriteBarrier-Tests'!!WBMock methodsFor: 'as yet unclassified' stamp: 'avi 10/6/2004 12:21'!lazyX	^ x ifNil: [x := 42]! !!WBMock methodsFor: 'as yet unclassified' stamp: 'avi 10/6/2004 12:20'!y: anObject	y := anObject! !!WBMock methodsFor: 'tests' stamp: 'cmm 11/23/2011 22:24'!x: n x := n! !!WBMock methodsFor: 'tests' stamp: 'avi 10/7/2004 13:54'!y ^ y! !WBMock subclass: #WBMockSub	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'WriteBarrier-Tests'!TestCase subclass: #WBTestBarrier	instanceVariableNames: 'barrier'	classVariableNames: ''	poolDictionaries: ''	category: 'WriteBarrier-Tests'!!WBTestBarrier methodsFor: 'as yet unclassified' stamp: 'avi 10/7/2004 03:19'!assertChanged: anObject	self assert: (barrier isDirty: anObject)! !!WBTestBarrier methodsFor: 'as yet unclassified' stamp: 'avi 10/7/2004 03:19'!denyChanged: anObject	self deny: (barrier isDirty: anObject)! !!WBTestBarrier methodsFor: 'as yet unclassified' stamp: 'avi 10/7/2004 03:19'!enableWriteBarrier: anObject	barrier add: anObject! !!WBTestBarrier methodsFor: 'as yet unclassified' stamp: 'avi 10/7/2004 03:19'!resetChanged	barrier clearDirtySet ! !!WBTestBarrier methodsFor: 'as yet unclassified' stamp: 'avi 10/7/2004 03:19'!setUp	barrier := DirtySetWriteBarrier new! !!WBTestBarrier methodsFor: 'as yet unclassified' stamp: 'avi 10/7/2004 03:19'!tearDown	barrier unregister! !!WBTestBarrier methodsFor: 'as yet unclassified' stamp: 'avi 10/6/2004 14:01'!testAtPutDelegatingCollection	| coll |	coll := OrderedCollection new: 5.	coll add: 'bar'.	self enableWriteBarrier: coll.	coll at: 1 put: 'foo'.	self denyChanged: coll.	1 to: 100 do: [:i | coll add: i].	self assertChanged: coll! !!WBTestBarrier methodsFor: 'as yet unclassified' stamp: 'avi 10/6/2004 14:01'!testAtPutOverriden	| array |	array := ColorArray new: 3.	array at: 1 put: Color red.	self denyChanged: array.	self enableWriteBarrier: array.	array at: 2 put: Color blue.	self assertChanged: array! !!WBTestBarrier methodsFor: 'as yet unclassified' stamp: 'cmm 11/26/2011 16:37'!testAtPutVariablySized	| array |	array := WordArray new: 3.	array at: 1 put: 42.	self denyChanged: array.	self enableWriteBarrier: array.	array at: 2 put: 37.	self assertChanged: array! !!WBTestBarrier methodsFor: 'as yet unclassified' stamp: 'cmm 5/30/2018 20:14'!testBarrierIndependence	"Independence is accomplished by each WriteBarrier compiling its own instances of the subclasses (which have the same names!!)."	| barrier1 barrier2 arr1 arr2 |	barrier1 := DirtySetWriteBarrier new.	barrier2 := DirtySetWriteBarrier new.	barrier1 add: (arr1 := Array with: 'init').	arr1		at: 1		put: 'barrier1'.	barrier2 add: (arr2 := Array with: 'init2').	arr2		at: 1		put: 'barrier2'.	self		 assert: arr1 writeBarrier == barrier1 ;		 assert: arr2 writeBarrier == barrier2 ;		 assert: barrier1 dirtySet size = 1 ;		 assert: barrier2 dirtySet size = 1 ;		 assert: (barrier1 builderForClass: Array) barrierClass ~~ (barrier2 builderForClass: Array) barrierClass.	barrier1 unregister.	barrier2 unregister! !!WBTestBarrier methodsFor: 'as yet unclassified' stamp: 'avi 10/7/2004 13:32'!testCannotAddBlock	self should: [self enableWriteBarrier: [2+2]] raise: Error! !!WBTestBarrier methodsFor: 'as yet unclassified' stamp: 'avi 10/6/2004 12:14'!testClassChange	| dict |	dict := Dictionary new.	self assert: dict class == Dictionary.	self enableWriteBarrier: dict.	self deny: dict class  == Dictionary.! !!WBTestBarrier methodsFor: 'as yet unclassified' stamp: 'cmm 11/26/2011 16:40'!testClassChangeCompact	| arr |	arr := WordArray with: 37.	self assert: arr class == WordArray.	self enableWriteBarrier: arr.	self deny: arr class  == WordArray! !!WBTestBarrier methodsFor: 'as yet unclassified' stamp: 'avi 10/7/2004 03:14'!testCompetingManager	| manager2 x y |	manager2 := WriteBarrier new.	x := WBMock new.	self shouldnt: [manager2 add: x] raise: Error.	y := WBMock new.	self enableWriteBarrier: y.	self should: [manager2 add: y] raise: Error	! !!WBTestBarrier methodsFor: 'as yet unclassified' stamp: 'avi 10/6/2004 13:06'!testDoubleWriteBarrier	| m |	m := WBMock new.	self assert: m class == WBMock.	self enableWriteBarrier: m.	self assert: m class superclass == WBMock.	self enableWriteBarrier: m.	self assert: m class superclass == WBMock! !!WBTestBarrier methodsFor: 'as yet unclassified' stamp: 'avi 10/6/2004 14:02'!testNoWriteBarrier	| point |	point := 2@2.	point setX: 25 setY: 25.	self denyChanged: point! !!WBTestBarrier methodsFor: 'as yet unclassified' stamp: 'cmm 11/26/2011 16:42'!testRemove	| arr |	arr := WordArray with: 38.	self enableWriteBarrier: arr.	arr at: 1 put: 39.	self assertChanged: arr.	barrier remove: arr.	self resetChanged.	arr at: 1 put: 40.	self denyChanged: arr! !!WBTestBarrier methodsFor: 'as yet unclassified' stamp: 'avi 10/6/2004 14:01'!testSelectiveNotification	| m |	m := WBMock new.	self enableWriteBarrier: m.	self denyChanged: m.	m lazyX.	self assertChanged: m.	self resetChanged.	m lazyX.	self denyChanged: m! !!WBTestBarrier methodsFor: 'as yet unclassified' stamp: 'cmm 11/26/2011 16:54'!testSpecies	| array list |	array := WordArray with: 1 with: 2 with: 3.	list := LinkedList new add: (StackLink with: 3); yourself.	self assert: array species == WordArray.	self assert: list species == Array.	self enableWriteBarrier: array.	self enableWriteBarrier: list.	self assert: array species == WordArray.	self assert: list species == Array! !!WBTestBarrier methodsFor: 'as yet unclassified' stamp: 'cmm 11/26/2011 17:06'!testString	| string |	string := 'test' copy.	Smalltalk isRunningCog		ifTrue:			[ self				should: [ self enableWriteBarrier: string ]				raise: Error ]		ifFalse:			[ self				shouldnt: [ self enableWriteBarrier: string ]				raise: Error ]! !!WBTestBarrier methodsFor: 'as yet unclassified' stamp: 'cmm 11/26/2011 17:10'!testTrackEquivalentInstances	| arr arr2 arr3 |	arr := WordArray with: 2.	arr2 := WordArray with: 2.	arr3 := WordArray with: 2.	self		 assert: arr = arr2 ;		 deny: arr == arr2.	self enableWriteBarrier: arr.	self enableWriteBarrier: arr2.	arr at: 1 put: 25.	arr3 at: 1 put: 25.	self assertChanged: arr.	self denyChanged: arr2.	self denyChanged: arr3! !!WBTestBarrier methodsFor: 'as yet unclassified' stamp: 'cmm 11/26/2011 17:12'!testVariableSelectiveNotification	| a |	a := WordArray with: 3.	self enableWriteBarrier: a.	self denyChanged: a.	a at: 1 put: 3.	self denyChanged: a.	a at: 1 put: 4.	self assertChanged: a! !!WBTestBarrier methodsFor: 'as yet unclassified' stamp: 'cmm 11/26/2011 17:14'!testWriteBarrier	| interval |	interval := 3 to: 5.	self enableWriteBarrier: interval.	interval setFrom: 13 to: 15 by: 1.	self assertChanged: interval! !TestCase subclass: #WBTestSystemChanges	instanceVariableNames: 'barrier'	classVariableNames: ''	poolDictionaries: ''	category: 'WriteBarrier-Tests'!!WBTestSystemChanges methodsFor: 'as yet unclassified' stamp: 'avi 10/7/2004 03:21'!barrierClass	^ barrier barrierClassForClass: WBMock! !!WBTestSystemChanges methodsFor: 'as yet unclassified' stamp: 'avi 10/7/2004 03:20'!setUp	barrier := WriteBarrier new! !!WBTestSystemChanges methodsFor: 'as yet unclassified' stamp: 'avi 10/7/2004 11:47'!tearDown	barrier unregister! !!WBTestSystemChanges methodsFor: 'as yet unclassified' stamp: 'cmm 11/23/2011 22:23'!testAddMutation	| c |	c := self barrierClass.	self withDefaultMethod: 'y ^ y' on: WBMock do:		[self deny: (c includesSelector: #y).		WBMock compile: 'y ^ y ifNil: [y := 37]' classified: 'accessing'.		self assert: (c includesSelector: #y)]! !!WBTestSystemChanges methodsFor: 'as yet unclassified' stamp: 'cmm 11/23/2011 22:23'!testAddMutator	| c md cm |	c := self barrierClass.	md := c methodDictionary copy.	cm := c >> #x:.	self withTemporaryMethod: 'q ^ x := 42' on: WBMock do:		[self assert: (c >> #x:) == cm.		self deny: md = c methodDictionary.		self assert: (c includesSelector: #q)]! !!WBTestSystemChanges methodsFor: 'as yet unclassified' stamp: 'cmm 11/23/2011 22:23'!testAddNonMutator	| c md cm |	c := self barrierClass.	md := c methodDictionary copy.	cm := c >> #x:.	self withTemporaryMethod: 'q ^ 42' on: WBMock do:		[self assert: (c >> #x:) == cm.		self assert: md = c methodDictionary.		self deny: (c includesSelector: #q)]! !!WBTestSystemChanges methodsFor: 'as yet unclassified' stamp: 'cmm 7/29/2010 13:28'!testChangeDifferentField	| c cm |	c := self barrierClass.	self withDefaultMethod: 'x: n x := n' on: WBMock do:		[cm := c >> #x:.		WBMock compile: 'x: n y := n'.		self deny: (c >> #x:) == cm]! !!WBTestSystemChanges methodsFor: 'as yet unclassified' stamp: 'cmm 7/29/2010 13:28'!testChangeSameField	| c cm |	c := self barrierClass.	self withDefaultMethod: 'x: n x := n' on: WBMock do:		[cm := c >> #x:.		WBMock compile: 'x: n x := n + 1'.		self assert: (c >> #x:) == cm]! !!WBTestSystemChanges methodsFor: 'as yet unclassified' stamp: 'avi 10/7/2004 03:22'!testClassFormatChange	| oldFmt c |	oldFmt := WBMock format.	c := self barrierClass.	self assert: c format = WBMock format.	WBMock addInstVarName: 'foo'.	c := self barrierClass.	[self deny: WBMock format = oldFmt.	self assert: c format = WBMock format]		ensure: [WBMock removeInstVarName: 'foo']! !!WBTestSystemChanges methodsFor: 'as yet unclassified' stamp: 'avi 10/7/2004 11:48'!testClassFormatChangeWithInstance	| instance instance2 |	instance := WBMock new.	instance2 := WBMock new.	barrier add: instance.	instance y: 42.	instance2 y: 23.	WBMock removeInstVarName: 'x'.	[self assert: instance2 y = 23.	self assert: instance y = 42]		ensure: [Object subclass: #WBMock	instanceVariableNames: 'x y'	classVariableNames: ''	poolDictionaries: ''	category: 'WriteBarrier-Tests']! !!WBTestSystemChanges methodsFor: 'as yet unclassified' stamp: 'cmm 11/23/2011 22:23'!testRemoveField	| c |	c := self barrierClass.	self assert: (c includesSelector: #y:).	WBMock removeInstVarName: 'y'.	c := self barrierClass.	[self deny: (c includesSelector: #y:)]		ensure: [WBMock addInstVarName: 'y']! !!WBTestSystemChanges methodsFor: 'as yet unclassified' stamp: 'cmm 11/23/2011 22:23'!testRemoveMutation	| c |	c := self barrierClass.	self withDefaultMethod: 'x: n x := n' on: WBMock do:		[self assert: (c includesSelector: #x:).		WBMock compile: 'x: n ^ 42'.		self deny: (c includesSelector: #x:)]! !!WBTestSystemChanges methodsFor: 'as yet unclassified' stamp: 'cmm 11/23/2011 22:23'!testRemoveMutator	| c |	c := self barrierClass.	self withDefaultMethod: 'x: n x := n' on: WBMock do:		[self assert: (c includesSelector: #x:).		WBMock removeSelector: #x:.		self deny: (c includesSelector: #x:)]! !!WBTestSystemChanges methodsFor: 'as yet unclassified' stamp: 'cmm 11/23/2011 22:24'!testSubClass	| c |	c := (barrier builderForClass: WBMockSub) barrierClass.	self withDefaultMethod: 'y ^ y' on: WBMock do:		[self deny: (c includesSelector: #y).		WBMock compile: 'y ^ y ifNil: [y := 37]' classified: 'accessing'.		self assert: (c includesSelector: #y)]! !!WBTestSystemChanges methodsFor: 'as yet unclassified' stamp: 'avi 10/7/2004 02:03'!withDefaultMethod: aString on: aClass do: aBlock	aClass compile: aString classified: 'tests'.	aBlock ensure: [aClass compile: aString classified: 'tests']! !!WBTestSystemChanges methodsFor: 'as yet unclassified' stamp: 'avi 10/7/2004 02:08'!withTemporaryMethod: aString on: aClass do: aBlock	aClass compile: aString classified: 'tests'.	aBlock ensure: [aClass removeSelector: (Parser new parseSelector: aString)]! !