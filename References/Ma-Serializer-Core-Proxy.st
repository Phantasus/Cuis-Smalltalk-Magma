ProtoObject subclass: #MaMinimalObject	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Ma-Serializer-Core-Proxy'!!MaMinimalObject commentStamp: 'cmm 1/13/2005 14:25' prior: 0!I am the main superclass for objects with a minimal api.  I am meant to have just enough api to be able to develop and debug.!!MaMinimalObject methodsFor: 'Public methods'!= anObject 	"Answer whether the receiver and the argument represent the same 	object. If = is redefined in any subclass, consider also redefining the 	message hash."	^self == anObject! !!MaMinimalObject methodsFor: 'Public methods' stamp: 'cmm 12/23/2010 15:03'!subclassResponsibility	"This message sets up a framework for the behavior of the class' subclasses.	Announce that the subclass should have implemented this message."	self error: 'My subclass should have overridden ' , thisContext sender selector printString! !!MaMinimalObject methodsFor: 'Public methods'!~= anObject	"Answer a Boolean which is false when the receiver and anObject	 are equivalent, and true otherwise."	^(self = anObject) not! !!MaMinimalObject methodsFor: 'printing' stamp: 'kph 7/14/2007 05:48'!asExplorerString	^ self printString! !!MaMinimalObject methodsFor: 'printing'!printOn: aStream	"Append to the argument, aStream, a sequence of characters that  	identifies the receiver."	| title |	title := self class name.	aStream		nextPutAll: (title first isVowel ifTrue: ['an '] ifFalse: ['a ']);		nextPutAll: title! !!MaMinimalObject methodsFor: 'printing' stamp: 'cmm 12/25/2002 00:41'!printString	"Answer a String whose characters are a description of the receiver. 	If you want to print without a character limit, use fullPrintString."	^String streamContents: [ :s | self printOn: s ]! !!MaMinimalObject methodsFor: 'actions' stamp: 'cmm 1/13/2005 13:46'!becomeForward: otherObject copyHash: copyHash	"Primitive. All variables in the entire system that used to point to the receiver now point to the argument.	If copyHash is true, the argument's identity hash bits will be set to those of the recevier.	Fails if either argument is a SmallInteger."	(Array with: self)		elementsForwardIdentityTo:			(Array with: otherObject)				copyHash: copyHash! !!MaMinimalObject methodsFor: 'accessing' stamp: 'cmm 8/10/2011 16:19'!class	"Answer a Class which is the receiver's class"	<primitive: 111>	self primitiveFailed! !!MaMinimalObject methodsFor: 'private' stamp: 'cmm 7/1/2012 17:05'!iconOrThumbnailOfSize: aNumberOrPoint 	"To support the ObjectExplorer.  Answer an appropiate form to represent the receiver."	^ nil! !!MaMinimalObject methodsFor: 'private' stamp: 'cmm 12/25/2002 00:42'!primitiveFailed	"Announce that a primitive has failed and there is no appropriate 	Smalltalk code to run."	self error: 'a primitive has failed'! !!MaMinimalObject methodsFor: 'debugging' stamp: 'cmm 12/1/2004 14:28'!inspect	"Create and schedule an Inspector in which the user can examine the receiver's variables."	self inspectorClass openOn: self withEvalPane: true! !!MaMinimalObject methodsFor: 'debugging' stamp: 'cmm 12/1/2004 14:28'!inspectorClass	^ Inspector! !!MaMinimalObject methodsFor: 'testing' stamp: 'cmm 5/4/2005 11:15'!isBehindWriteBarrier	"Proxy's don't change anyway.."	^ false! !!MaMinimalObject methodsFor: 'testing' stamp: 'cmm 5/23/2011 14:20'!isLiteral	"Answer whether the receiver has a literal text form recognized by the compiler."	^ false! !!MaMinimalObject methodsFor: 'testing' stamp: 'cmm 2/15/2005 10:45'!isMorph	"this is here to satisfy CommandHistory."	^ false! !!MaMinimalObject methodsFor: '*magma-client' stamp: 'cmm 3/28/2005 17:02'!maAllowsWriteBarrier	^ false! !MaMinimalObject subclass: #MaMutatingProxy	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Ma-Serializer-Core-Proxy'!!MaMutatingProxy methodsFor: 'private' stamp: 'cmm 10/25/2010 13:29'!doesNotUnderstand: aMessage 	self subclassResponsibility! !!MaMutatingProxy methodsFor: 'private' stamp: 'cmm 1/13/2005 13:45'!maIsMutatingProxy	^ true! !!MaMutatingProxy methodsFor: 'private' stamp: 'cmm 10/25/2010 13:29'!respondsTo: aMessage 	"this is so that respondsTo can be used on proxies without realizing the object needed for explorers which send respondsTo: #explorerContents"	^ (self class canUnderstand: aMessage) or: [ self realObjectIfMutatingProxy respondsTo: aMessage ]! !!MaMutatingProxy methodsFor: 'ide support' stamp: 'cmm 10/25/2010 12:58'!explorerContents	| proxy |	proxy := self printString.	^ Array with:		(ObjectExplorerWrapper			with: self realObjectIfMutatingProxy			name: proxy asString			model: self realObjectIfMutatingProxy)! !!MaMutatingProxy methodsFor: 'ide support' stamp: 'kph 7/14/2007 05:49'!hasContentsInExplorer	^true! !!MaMutatingProxy methodsFor: 'testing' stamp: 'cmm 10/25/2010 13:28'!maRealObjectIsReified	self subclassResponsibility! !!MaMutatingProxy methodsFor: 'accessing' stamp: 'cmm 4/23/2013 10:07'!maWantsPostMaterialization	^ self realObjectIfMutatingProxy maWantsPostMaterialization! !!MaMutatingProxy methodsFor: 'accessing' stamp: 'cmm 10/25/2010 13:08'!realObjectIfMutatingProxy	self subclassResponsibility! !!MaMutatingProxy methodsFor: 'accessing' stamp: 'cmm 1/17/2014 14:02'!realObjectIfReified	"Only answer my realObject if its reified, otherwise nil."	^ self maRealObjectIsReified ifTrue: [ self realObjectIfMutatingProxy ]! !!MaMutatingProxy methodsFor: 'accessing' stamp: 'cmm 10/25/2010 13:32'!setRealObjectTo: anObject	self subclassResponsibility! !