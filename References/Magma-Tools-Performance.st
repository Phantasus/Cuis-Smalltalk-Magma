MaObject subclass: #MagmaBenchmarker	instanceVariableNames: 'fixture session'	classVariableNames: 'HardwareInfo Port'	poolDictionaries: ''	category: 'Magma-Tools-Performance'!!MagmaBenchmarker methodsFor: 'benchmarks-write' stamp: 'cmm 11/27/2011 11:53'!a1001BufferCommit	"How fast can it commit when there are 1001 objects to write in each commit?"	| count |	count := 0.	session abort; begin.	self focusOn: #oneThousandElementArrayOfObjectsFixture.	^ [ self oneThousandElementArrayOfObjectsFixture do: [ : eachArray | eachArray at: 1 put: (count := count + 1) ].	session commitAndBegin ] bench! !!MagmaBenchmarker methodsFor: 'benchmarks-write' stamp: 'cmm 11/27/2011 15:27'!aOneMillionObjectPointerCommit	"How fast can it write 1000 1000-element Arrays?"	| toggle |	toggle := false.	session		 abort ;		 begin.	self focusOn: #oneMillionObjectPointersFixture.	^ [ self oneMillionObjectPointersFixture do:		[ : eachArray | eachArray			at: 1			put: (toggle := toggle not) ].	session commitAndBegin ] bench! !!MagmaBenchmarker methodsFor: 'benchmarks-write' stamp: 'cmm 1/11/2007 21:52'!connectionTests	^ #(timeToDisconnect timeToConnect)! !!MagmaBenchmarker methodsFor: 'benchmarks-write' stamp: 'cmm 11/27/2011 11:40'!oneThousandElementArrayCommit	"How fast can it commit when there is a substantial buffer to write?"	| count |	count := 0.	session abort; begin.	self focusOn: #oneThousandElementArrayFixture.	^ [ self oneThousandElementArrayFixture at: 1 put: (count := count + 1).	session commitAndBegin ] bench! !!MagmaBenchmarker methodsFor: 'benchmarks-write' stamp: 'cmm 11/27/2011 11:40'!peakCommitRate	"A minimal commit-package committed over and over to see what the fastest Magma's architecture can oscillate.  This is done using auto-begin to shave the last bit of efficiency."	| count |	count := 0.	session abort; begin.	self focusOn: #singleObjectFixture.	^ [ self singleObjectFixture at: 1 put: (count := count +1).	session commitAndBegin ] bench! !!MagmaBenchmarker methodsFor: 'benchmarks-write' stamp: 'cmm 11/27/2011 15:27'!writeTests	^ #(peakCommitRate oneThousandElementArrayCommit a1001BufferCommit aOneMillionObjectPointerCommit)! !!MagmaBenchmarker methodsFor: 'benchmarks-magmacollections' stamp: 'cmm 12/8/2009 10:36'!addThousandsOfObjectsAtOnce	"This tests how long it takes to add a fixed number of objects, one at a time, to a MagmaCollection with no indexes."	self focusOn: #magmaCollectionFixture.	session abort.	"ensure not in a transaction."	^ ((Time millisecondsToRun: 		[ session commit: 			[ 1 				to: self thousands				do: [ : n | self magmaCollectionFixture add: Array new ] ] ]) / 1000.0) printString , ' seconds.'! !!MagmaBenchmarker methodsFor: 'benchmarks-magmacollections' stamp: 'cmm 12/8/2009 10:37'!addThousandsOfObjectsCommitEvery: batchSize 	"This tests how long it takes to add a fixed number of objects, one at a time, to a MagmaCollection with no indexes."	"Ensure the collection is already created, so we only measure the add pace."	session commit: [ self magmaCollectionFixture ].	self focusOn: #magmaCollectionFixture.	Smalltalk garbageCollect.	session		finalizeOids ;		abort ;		begin.	^ ((Time millisecondsToRun: 		[ 1 			to: self thousands			do: 				[ : n | 				self magmaCollectionFixture add: Array new.				n \\ batchSize = 0 ifTrue: [ session commitAndBegin ] ].		[ session inTransaction ] whileTrue: [ session commit ] ]) / 1000.0) printString , ' seconds.'! !!MagmaBenchmarker methodsFor: 'benchmarks-magmacollections' stamp: 'cmm 8/17/2005 22:24'!addThousandsOfObjectsOneHundredAtATime	"This tests how long it takes to add a fixed number of objects to a MagmaCollection with no indexes."	^ self addThousandsOfObjectsCommitEvery: 100! !!MagmaBenchmarker methodsFor: 'benchmarks-magmacollections' stamp: 'cmm 8/17/2005 22:19'!addThousandsOfObjectsTenAtATime	"This tests how long it takes to add a fixed number of objects to a MagmaCollection with no indexes."	^ self addThousandsOfObjectsCommitEvery: 10! !!MagmaBenchmarker methodsFor: 'benchmarks-magmacollections' stamp: 'cmm 3/24/2005 00:07'!magmaArrayTests	^ #( getMagmaArraySize updateThousandsOfMagmaArrayElements )! !!MagmaBenchmarker methodsFor: 'benchmarks-magmacollections' stamp: 'cmm 8/17/2005 22:25'!magmaCollectionTests	^ #( addThousandsOfObjectsTenAtATime addThousandsOfObjectsOneHundredAtATime addThousandsOfObjectsAtOnce )! !!MagmaBenchmarker methodsFor: 'accessing' stamp: 'cmm 1/11/2007 21:45'!allCategories	"These selectors return the array of selectors to run for that category."	^#( connectionTests readTests writeTests magmaArrayTests magmaCollectionTests )! !!MagmaBenchmarker methodsFor: 'accessing' stamp: 'cmm 6/10/2005 17:01'!session	^ session! !!MagmaBenchmarker methodsFor: 'accessing' stamp: 'cmm 3/23/2005 22:37'!thousands	"The size of the MagmaCollection tests."	^ 1000! !!MagmaBenchmarker methodsFor: 'benchmarks-read' stamp: 'cmm 3/15/2005 22:24'!benchReadOf: oid	^ [ session realObjectFor: oid ] bench! !!MagmaBenchmarker methodsFor: 'benchmarks-read' stamp: 'cmm 3/15/2005 22:22'!oneMillionObjectPointersRead	^ self benchReadOf: (session oidFor: self oneMillionObjectPointersFixture)! !!MagmaBenchmarker methodsFor: 'benchmarks-read' stamp: 'cmm 3/15/2005 22:24'!oneThousandElementArrayOfObjectsRead	^ self benchReadOf: (session oidFor: self oneThousandElementArrayOfObjectsFixture)! !!MagmaBenchmarker methodsFor: 'benchmarks-read' stamp: 'cmm 3/15/2005 22:23'!oneThousandElementArrayRead	^ self benchReadOf: (session oidFor: self oneThousandElementArrayFixture)! !!MagmaBenchmarker methodsFor: 'benchmarks-read' stamp: 'cmm 3/15/2005 22:22'!oneThousandLevelsDeepRead	^ self benchReadOf: (session oidFor: self thousandLevelDeepFixture)! !!MagmaBenchmarker methodsFor: 'benchmarks-read' stamp: 'cmm 10/20/2010 13:36'!peakRefreshRate	^ [ session refresh ] bench! !!MagmaBenchmarker methodsFor: 'benchmarks-read' stamp: 'cmm 3/24/2005 00:05'!readTests	^ #(peakRefreshRate singleObjectRead oneThousandElementArrayRead oneThousandElementArrayOfObjectsRead oneMillionObjectPointersRead oneThousandLevelsDeepRead)! !!MagmaBenchmarker methodsFor: 'benchmarks-read' stamp: 'cmm 3/15/2005 22:22'!singleObjectRead	^ self benchReadOf: (session oidFor: self singleObjectFixture)! !!MagmaBenchmarker methodsFor: 'benchmarks-read' stamp: 'cmm 6/26/2008 22:59'!timeToConnect	"We do a manual #transition after every test, so allow up to 250 in the queue, none of which will be based on having transitioned due to time."	session statistics snapshotInterval: (10 			to: 2500			by: 10).	^ [ session connectAs: 'benchmarker' ] durationToRun printString! !!MagmaBenchmarker methodsFor: 'benchmarks-read' stamp: 'cmm 1/11/2007 21:52'!timeToDisconnect	^ [ session disconnect ] durationToRun printString! !!MagmaBenchmarker methodsFor: 'fixtures' stamp: 'cmm 11/11/2014 10:31'!focusOn: fixtureSelector 	(fixture keys copyWithout: fixtureSelector) do:		[ : each | session stubOut: (fixture at: each) ].	Smalltalk garbageCollect.	session finalizeOids.	(self perform: fixtureSelector) realObjectIfMutatingProxy "ensure proxy-materialized."! !!MagmaBenchmarker methodsFor: 'fixtures' stamp: 'cmm 3/24/2005 00:09'!initializeFixture	session commit:		[ session root			at: 'benchmarkFixture' 			put: (fixture := Dictionary new).		"Force lazy-initialization; it was merely nice to have it with the getter rather than all piled up in one initializer."		self 			magmaCollectionFixture ;			magmaArrayFixture ;			oneMillionObjectPointersFixture ;			oneThousandElementArrayFixture ;			oneThousandElementArrayOfObjectsFixture ;			singleObjectFixture ;			thousandLevelDeepFixture ]! !!MagmaBenchmarker methodsFor: 'fixtures' stamp: 'cmm 3/24/2005 00:25'!magmaArrayFixture	^ fixture		at: #magmaArray		ifAbsentPut: [ MagmaArray new at: 1000 put: -1; yourself ]! !!MagmaBenchmarker methodsFor: 'fixtures' stamp: 'cmm 3/13/2005 23:05'!magmaCollectionFixture	^ fixture		at: #magmaCollectionFixture		ifAbsentPut: [ MagmaCollection new ]! !!MagmaBenchmarker methodsFor: 'fixtures' stamp: 'cmm 12/7/2011 15:50'!oneMillionObjectPointersFixture	^ fixture		at: #oneMillionObjectPointersFixture		ifAbsentPut:			[ WbArray withAll:				((1 to: 1000) collect:					[ : x | WbArray new: 1000 ]) ]! !!MagmaBenchmarker methodsFor: 'fixtures' stamp: 'cmm 3/13/2005 23:06'!oneThousandElementArrayFixture	^ fixture		at: #oneThousandElementArrayFixture		ifAbsentPut: [ Array new: 1000 ]! !!MagmaBenchmarker methodsFor: 'fixtures' stamp: 'cmm 12/7/2011 15:50'!oneThousandElementArrayOfObjectsFixture	^ fixture		at: #oneThousandElementArrayOfObjectsFixture		ifAbsentPut:			[ WbArray withAll:				((1 to: 1000) collect:					[ : x | WbArray new: 1 ]) ]! !!MagmaBenchmarker methodsFor: 'fixtures' stamp: 'cmm 11/27/2011 11:37'!singleObjectFixture	^ fixture		at: #singleObjectFixture		ifAbsentPut: [ WordArray new: 1 ]! !!MagmaBenchmarker methodsFor: 'fixtures' stamp: 'cmm 3/13/2005 23:06'!thousandLevelDeepFixture	^ fixture		at: #thousandLevelDeepFixture		ifAbsentPut:			[ | rootOfDeepObject |			rootOfDeepObject := Array new: 1.			(1 to: 1000)				inject: rootOfDeepObject				into:					[ : prior : x |					prior at: 1 put: (Array new: 1) ].			rootOfDeepObject ]! !!MagmaBenchmarker methodsFor: 'benchmarks-magmaarrays' stamp: 'cmm 3/24/2005 00:23'!getMagmaArraySize	| array |	array := fixture at: #magmaArray.	^ [ array size ] bench! !!MagmaBenchmarker methodsFor: 'benchmarks-magmaarrays' stamp: 'cmm 11/14/2006 21:14'!updateThousandsOfMagmaArrayElements	| array |	array := fixture at: #magmaArray.	session begin.	^ 	[ 	[ 1 		to: self thousands		do: 			[ : x | 			array 				at: x				put: x ].	session commitAndBegin ] bench ] ensure: [ session abort ]! !!MagmaBenchmarker methodsFor: 'capture context' stamp: 'cmm 12/8/2011 15:14'!magmaPackageListDo: oneArgBlock 	^ #('Ma-Core' 'Ma-Collections' 'Ma-Ascii-Report' 'Ma-Statistics' 'Ma-Serializer-Core' 'Ma-Client-Server-Core' 'Magma-Client' 'Magma-Server' 'Magma-Tools' 'Ma-Search' ) do: oneArgBlock! !!MagmaBenchmarker methodsFor: 'capture context' stamp: 'cmm 3/23/2005 23:47'!writeBenchmarkerInformationTo: aStream	aStream		cr; cr;		nextPutAll: 'Benchmarker Details:'.	#(thousands)		do:			[ : each | 			self				writeEntry: each				value: (self perform: each)				to: aStream ]! !!MagmaBenchmarker methodsFor: 'capture context' stamp: 'cmm 9/22/2008 10:24'!writeClientSessionInformationTo: aStream	aStream		cr; cr;		nextPutAll: 'MagmaSession Details:'.	#(isLocal)		do:			[ : each | 			self				writeEntry: each				value: (session perform: each)				to: aStream ].	#(allowWriteBarrier)		do:			[ : each | 			self				writeEntry: each				value: (session preferences perform: each)				to: aStream ]! !!MagmaBenchmarker methodsFor: 'capture context' stamp: 'cmm 9/23/2008 14:54'!writeContextInformationTo: aStream 	aStream nextPutAll: 'The date is '.	DateAndTime now printOn: aStream.	self		writeHardwareInformationTo: aStream ;		writePlatformInformationTo: aStream ;		writeVmInformationTo: aStream ;		writeImageInformationTo: aStream ;		writePackageInformationTo: aStream ;		writeServerInformationTo: aStream ;		writeClientSessionInformationTo: aStream ;		writeBenchmarkerInformationTo: aStream! !!MagmaBenchmarker methodsFor: 'capture context' stamp: 'cmm 6/16/2005 23:43'!writeEntry: selectorSymbol value: anObject to: aStream	aStream		cr; tab;		nextPutAll: selectorSymbol withBlanksTrimmed ;		nextPutAll: ' : ' ;		maPrint: anObject! !!MagmaBenchmarker methodsFor: 'capture context' stamp: 'cmm 3/13/2005 18:14'!writeHardwareInformationTo: aStream	aStream		cr ; cr ;		nextPutAll: 'Hardware Details:'.	(self class hardwareAttributes subStrings: ',') with: (self class hardwareInfo subStrings: ',') do:		[ : eachAttribute : eachValue |		self			writeEntry: eachAttribute			value: eachValue			to: aStream ]! !!MagmaBenchmarker methodsFor: 'capture context' stamp: 'cmm 6/17/2009 10:12'!writeImageInformationTo: aStream	aStream		cr; cr;		nextPutAll: 'Image Details:'.	self		writeEntry: 'version'		value: SystemVersion current version		to: aStream.	self		writeEntry: 'lastUpdate'		value: SystemVersion current highestUpdate printString		to: aStream.	self		writeEntry: 'showStatusViaCursor'		value: MagmaPreferences showStatusViaCursor		to: aStream.! !!MagmaBenchmarker methodsFor: 'capture context' stamp: 'cmm 6/26/2008 23:31'!writePackageInformationTo: aStream 	| workingCopy versionInformation |	aStream		cr ;		cr ;		nextPutAll: 'Code Package Details (from Monticello):'.	self magmaPackageListDo: 		[ : each | 		workingCopy := (MCPackage named: each) workingCopy.		versionInformation := workingCopy ancestors first.		aStream			cr ;			cr ;			nextPutAll: versionInformation summaryHeader.		workingCopy needsSaving ifTrue: 			[ aStream				cr ;				tab ;				nextPutAll: '** modified **' ] ]! !!MagmaBenchmarker methodsFor: 'capture context' stamp: 'cmm 9/23/2008 14:54'!writePlatformInformationTo: aStream 	aStream		cr ;		cr ;		nextPutAll: 'OS Details:'.	#(#osVersion #platformName #platformSubtype ) do: 		[ : each | 		self 			writeEntry: each			value: (SmalltalkImage current perform: each)			to: aStream ]! !!MagmaBenchmarker methodsFor: 'capture context' stamp: 'cmm 4/8/2015 20:06'!writeServerInformationTo: aStream	session isLocal ifFalse: [ ^ self "may want to figure out how to do this some day." ].	aStream		cr; cr;		nextPutAll: 'Magma server details:'.	#("flushAggressively")		do:			[ : each | 			self				writeEntry: each				value: (session repositoryController perform: each)				to: aStream ]! !!MagmaBenchmarker methodsFor: 'capture context' stamp: 'cmm 9/11/2008 22:10'!writeVmInformationTo: aStream	aStream		cr; cr;		nextPutAll: 'Vm Details:'.	#(vmVersion)		do:			[ : each | 			self				writeEntry: each				value: (SmalltalkImage current perform: each)				to: aStream ]! !!MagmaBenchmarker methodsFor: 'run' stamp: 'cmm 6/27/2008 00:24'!run: selector resultsTo: aStream 	aStream		cr ;		tab ;		nextPutAll: selector ;		nextPutAll: ' : ' ;		nextPutAll: (self perform: selector).	"Set each MaHistoricalStat's name to refer to this test, so we can see which test this stat is for."	session statistics historysDo: 		[ : eachStatHistory | 		eachStatHistory isActive ifTrue: [ eachStatHistory active name: selector ] ].	session statistics transition! !!MagmaBenchmarker methodsFor: 'run' stamp: 'cmm 3/23/2005 22:38'!runAll	^ self runAll: self allCategories! !!MagmaBenchmarker methodsFor: 'run' stamp: 'cmm 11/27/2011 15:13'!runAll: categoriesArray 	| answer priorShowStatusSetting |	"MagmaPreferences showStatusViaCursor is turned on, which will dramatically reduce benchmark results."	priorShowStatusSetting := MagmaPreferences showStatusViaCursor.	MagmaPreferences showStatusViaCursor: false.	answer := WriteStream on: String new.	self		 writeContextInformationTo: answer ;		 initializeFixture.	session readStrategy: MaReadStrategy deep.	answer		 cr ;		 cr ;		 nextPutAll: 'Benchmarks:'.	Smalltalk garbageCollect.	categoriesArray do:		[ : each | self			runCategory: each			resultsTo: answer ].	session disconnect.	MagmaPreferences showStatusViaCursor: priorShowStatusSetting.	^ answer contents! !!MagmaBenchmarker methodsFor: 'run' stamp: 'cmm 3/13/2005 23:03'!runCategory: selector resultsTo: aStream	aStream		cr; nextPutAll: '---';		cr ;		cr; nextPutAll: selector.	(self perform: selector) do:		[ : each |		self			run: each			resultsTo: aStream ]! !!MagmaBenchmarker methodsFor: 'initialize-release' stamp: 'cmm 3/15/2005 22:21'!session: aMagmaSession	session := aMagmaSession! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MagmaBenchmarker class	instanceVariableNames: ''!!MagmaBenchmarker class methodsFor: 'private' stamp: 'cmm 2/10/2012 15:40'!benchName	^ FileDirectory default fullNameFor: '_magma-bench'! !!MagmaBenchmarker class methodsFor: 'private' stamp: 'cmm 7/16/2007 22:08'!resetRepository	[ MagmaRepositoryController delete: self benchName ] 		on: MagmaDeleteWarning		do: [ : warning | warning resume ].	MagmaRepositoryController 		create: self benchName		root: Dictionary new! !!MagmaBenchmarker class methodsFor: 'private' stamp: 'cmm 3/23/2005 23:27'!runWith: aMagmaSession	^ (self session: aMagmaSession) runAll! !!MagmaBenchmarker class methodsFor: 'hardware info' stamp: 'cmm 12/7/2011 21:50'!captureHardwareDetails	| answer |	[ answer := UIManager default		request: 'Please enter a brief description of your hardware separated by commas ' , self hardwareAttributes		initialAnswer: (HardwareInfo ifNil: [ '' ]).	(answer subStrings: ',') size < (self hardwareAttributes subStrings: ',') size ] whileTrue: [ self inform: 'All of those things are important, please enter them all.' ].	^ answer! !!MagmaBenchmarker class methodsFor: 'hardware info' stamp: 'cmm 3/23/2005 17:16'!hardwareAttributes	^ 'computer, cpu, speed, memory, disk'! !!MagmaBenchmarker class methodsFor: 'hardware info' stamp: 'cmm 3/23/2005 17:08'!hardwareInfo	^ HardwareInfo := self captureHardwareDetails! !!MagmaBenchmarker class methodsFor: 'instance creation' stamp: 'cmm 7/5/2008 14:10'!connectSessionTo: hostString useWriteBarrier: useWriteBarrier 	| session |	session := MagmaSession 		host: hostString		port: self port.	session allowWriteBarrier: useWriteBarrier.	session connectAs: 'benchTest'.	^ self session: session! !!MagmaBenchmarker class methodsFor: 'instance creation' stamp: 'cmm 7/5/2008 14:10'!forBenchmarkHost: hostString withWriteBarrier: useWriteBarrier 	"This is a 'one-click' run of the benchmarks that exercises as much of the code as possible, while excluding network latency by using a hostString of 'localhost'."	^ self 		connectSessionTo: hostString		useWriteBarrier: useWriteBarrier! !!MagmaBenchmarker class methodsFor: 'instance creation' stamp: 'cmm 6/10/2005 16:58'!forLocalBaseline: useWriteBarrier	"This is a 'one-click' run of the benchmarks that exercises most of the Magma code without the serialization/materialization cost of Ma client server."	| session |	self resetRepository.	session := MagmaSession openLocal: self benchName.	session allowWriteBarrier: useWriteBarrier.	session connectAs: 'benchTest'.	^ self session: session! !!MagmaBenchmarker class methodsFor: 'instance creation' stamp: 'cmm 3/15/2005 22:21'!session: aMagmaSession	^ self new		session: aMagmaSession ;		yourself! !!MagmaBenchmarker class methodsFor: 'network baseline' stamp: 'cmm 7/6/2008 20:18'!port	"The port the benchmark host will listen on."	^ Port ifNil: [ Port := 51969 ]! !!MagmaBenchmarker class methodsFor: 'network baseline' stamp: 'cmm 7/6/2008 20:18'!port: anInteger	"Set the port the benchmark host will listen on."	Port := anInteger! !!MagmaBenchmarker class methodsFor: 'network baseline' stamp: 'cmm 11/27/2011 15:30'!runRemoteBaselineAgainst: hostString withWriteBarrier: useWriteBarrier 	"This is a 'one-click' run of the benchmarks over a network, the results includes the network latency."	| benchmarker |	^ 	[ (benchmarker := self 		forBenchmarkHost: hostString		withWriteBarrier: useWriteBarrier) runAll ] ensure: [ benchmarker session disconnectAndClose ]! !!MagmaBenchmarker class methodsFor: 'network baseline' stamp: 'cmm 10/13/2014 19:45'!runRemoteBaselineWithWriteBarrier: useWriteBarrier 	"This is a 'one-click' run of the benchmarks over a network, the results includes the network latency.	Before running this method:		1) Save this image.		2) Save this image as another name (e.g., _bench-server.image).		2.5) self startBenchmarkHost.		3) Relaunch this image.		4) Run this method in the relaunched image (print it!!)."	^ self		runRemoteBaselineAgainst: 'localhost'		withWriteBarrier: useWriteBarrier! !!MagmaBenchmarker class methodsFor: 'network baseline' stamp: 'cmm 6/26/2008 10:51'!startBenchmarkHost	| console |	self resetRepository.	console := MagmaServerConsole new open: self benchName.	console processOn: self port.	console inspect! !!MagmaBenchmarker class methodsFor: 'quick baseline run' stamp: 'cmm 11/13/2006 23:31'!runLocalBaseline: useWriteBarrier 	"This is a 'one-click' run of the benchmarks that exercises most of the Magma code without the serialization/materialization cost of Ma client server."	| benchmarker |	^ [ (benchmarker := self forLocalBaseline: useWriteBarrier) runAll ] ensure: [ benchmarker session disconnectAndClose ]! !